<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nicenis</name>
    </assembly>
    <members>
        <member name="T:Nicenis.ComponentModel.WatchableObject">
            <summary>
            Provides a base implementation for the INotifyPropertyChanged interface.
            This class is deprecated and remains for backward compatibility.
            The PropertyObservable class is recommended for new projects.
            </summary>
        </member>
        <member name="F:Nicenis.ComponentModel.WatchableObject.AllPropertyName">
            <summary>
            The property name that represents all properties.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetFromCache(System.Int32)">
            <summary>
            Finds a property name cache associated with the specified property getter method metadata token.
            If it does not exist, a new added property name cache is returned with the UnsetValue property name.
            </summary>
            <param name="metadataToken">The property getter method metadata token.</param>
            <returns>The property name cache if it exists; otherwise null.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``20(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13},System.Func{``14},System.Func{``15},System.Func{``16},System.Func{``17},System.Func{``18},System.Func{``19})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T15">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T16">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T17">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T18">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T19">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T20">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <param name="propertyExpression15">The lambda expression that returns the property.</param>
            <param name="propertyExpression16">The lambda expression that returns the property.</param>
            <param name="propertyExpression17">The lambda expression that returns the property.</param>
            <param name="propertyExpression18">The lambda expression that returns the property.</param>
            <param name="propertyExpression19">The lambda expression that returns the property.</param>
            <param name="propertyExpression20">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``19(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13},System.Func{``14},System.Func{``15},System.Func{``16},System.Func{``17},System.Func{``18})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T15">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T16">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T17">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T18">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T19">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <param name="propertyExpression15">The lambda expression that returns the property.</param>
            <param name="propertyExpression16">The lambda expression that returns the property.</param>
            <param name="propertyExpression17">The lambda expression that returns the property.</param>
            <param name="propertyExpression18">The lambda expression that returns the property.</param>
            <param name="propertyExpression19">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``18(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13},System.Func{``14},System.Func{``15},System.Func{``16},System.Func{``17})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T15">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T16">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T17">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T18">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <param name="propertyExpression15">The lambda expression that returns the property.</param>
            <param name="propertyExpression16">The lambda expression that returns the property.</param>
            <param name="propertyExpression17">The lambda expression that returns the property.</param>
            <param name="propertyExpression18">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``17(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13},System.Func{``14},System.Func{``15},System.Func{``16})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T15">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T16">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T17">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <param name="propertyExpression15">The lambda expression that returns the property.</param>
            <param name="propertyExpression16">The lambda expression that returns the property.</param>
            <param name="propertyExpression17">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``16(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13},System.Func{``14},System.Func{``15})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T15">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T16">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <param name="propertyExpression15">The lambda expression that returns the property.</param>
            <param name="propertyExpression16">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``15(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13},System.Func{``14})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T15">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <param name="propertyExpression15">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``14(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12},System.Func{``13})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T14">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <param name="propertyExpression14">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``13(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11},System.Func{``12})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T13">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <param name="propertyExpression13">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``12(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10},System.Func{``11})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T12">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <param name="propertyExpression12">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``11(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9},System.Func{``10})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T11">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <param name="propertyExpression11">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``10(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8},System.Func{``9})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``9(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7},System.Func{``8})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``8(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6},System.Func{``7})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``7(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5},System.Func{``6})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``6(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Func{``5})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``5(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``4(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``3(System.Func{``0},System.Func{``1},System.Func{``2})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``2(System.Func{``0},System.Func{``1})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.ToPropertyName``1(System.Func{``0})">
            <summary>
            Returns the property name extracted from the lambda expression that returns the property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <returns>The property name extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetFromStorage(System.String)">
            <summary>
            Finds a property value associated with the specified property name.
            If it does not exist, a new added property is returned with the UnsetValue value.
            </summary>
            <param name="propertyName">The property name to find.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetProperty``1(System.String,System.Func{``0})">
            <summary>
            Gets the property value specified by the property name.
            If it does not exist, the property value is set to the value returned by the initializer, and the value is returned.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="initializer">The initializer that returns the initialization value.</param>
            <returns>The property value if it exists; otherwise the value returned by the initializer.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetProperty``1(System.String)">
            <summary>
            Gets the property value specified by the property name.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>The property value if it exists; otherwise default(T).</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetProperty``1(System.Func{``0},System.Func{``0})">
            <summary>
            Gets the property value specified by the property expression that is used to extract the property name.
            If it does not exist, the property value is set to the value returned by the initializer, and the value is returned.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="initializer">The initializer that returns the initialization value.</param>
            <returns>The property value if it exists; otherwise the value returned by the initializer.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetProperty``1(System.Func{``0})">
            <summary>
            Gets the property value specified by the property expression that is used to extract the property name.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <returns>The property value if it exists; otherwise default(T).</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetPropertyOnly``1(System.String,``0,System.Action)">
            <summary>
            Sets a value to the property specified by the property name.
            This method does not raise a PropertyChanged event.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetPropertyOnly``1(System.String,``0)">
            <summary>
            Sets a value to the property specified by the property name.
            This method does not raise a PropertyChanged event.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetPropertyOnly``1(System.Func{``0},``0,System.Action)">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            This method does not raise a PropertyChanged event.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetPropertyOnly``1(System.Func{``0},``0)">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            This method does not raise a PropertyChanged event.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.Action,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.Action,System.String[])">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.String[])">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.Action,System.String)">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.String)">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0,System.Action)">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, a PropertyChanged event are raised for the property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0)">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed, a PropertyChanged event are raised for the property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="value">The property value.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.Action,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.Action,System.String[])">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.String[])">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.Action,System.String)">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.String)">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, PropertyChanged events are raised for the property name and the affected property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0,System.Action)">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, a PropertyChanged event is raised for the property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0)">
            <summary>
            Sets a value to the property specified by the property expression that is used to extract the property name.
            If it is changed, a PropertyChanged event is raised for the property name.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="value">The property value.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetCallerProperty``1(System.Func{``0},System.String)">
            <summary>
            Gets the property value specified by the property name that is obtained by the CallerMemberName attribute in a property getter.
            If it does not exist, the property value is set to the value returned by the initializer, and the value is returned.
            This method must be used in a property getter.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="initializer">The initializer that returns the initialization value.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>The property value if it exists; otherwise the default value.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.GetCallerProperty``1(System.String)">
            <summary>
            Gets the property value specified by the property name that is obtained by the CallerMemberName attribute in a property getter.
            If it does not exist, default(T) is returned.
            This method must be used in a property getter.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>The property value if it exists; otherwise default(T).</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerPropertyOnly``1(``0,System.Action,System.String)">
            <summary>
            Sets a value to the property specified by the property name that is obtained by the CallerMemberName attribute in a property setter.
            This method does not raise a PropertyChanged event.
            This method must be used in a property setter.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerPropertyOnly``1(``0,System.String)">
            <summary>
            Sets a value to the property specified by the property name that is obtained by the CallerMemberName attribute in a property setter.
            This method does not raise a PropertyChanged event.
            This method must be used in a property setter.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0,System.Action,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sets a value to the property specified by the property name that is obtained by the CallerMemberName attribute in a property setter.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            This method must be used in a property setter.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sets a value to the property specified by the property name that is obtained by the CallerMemberName attribute in a property setter.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            This method must be used in a property setter.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0,System.Action,System.String)">
            <summary>
            Sets a value to the property specified by the property name that is obtained by the CallerMemberName attribute in a property setter.
            If it is changed, a PropertyChanged event is raised for the property name.
            This method must be used in a property setter.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0,System.String)">
            <summary>
            Sets a value to the property specified by the property name that is obtained by the CallerMemberName attribute in a property setter.
            If it is changed, a PropertyChanged event is raised for the property name.
            This method must be used in a property setter.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetPropertyOnly``1(``0@,``0,System.Action)">
            <summary>
            Sets a value to the specified storage.
            This method does not raise a PropertyChanged event.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetPropertyOnly``1(``0@,``0)">
            <summary>
            Sets a value to the specified storage.
            This method does not raise a PropertyChanged event.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.Action,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.Action,System.String[])">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.String[])">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.Action,System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name and the affected property name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name and the affected property name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0,System.Action)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, a PropertyChanged event is raised for the property name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.String,``0@,``0)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, a PropertyChanged event is raised for the property name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.Action,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name extracted from the property expression and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name extracted from the property expression and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.Action,System.String[])">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name extracted from the property expression and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.String[])">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name extracted from the property expression and the affected property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.Action,System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name extracted from the property expression and the affected property name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name extracted from the property expression and the affected property name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyName">The affected property name.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0,System.Action)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, a PropertyChanged event is raised for the property name extracted from the property expression.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetProperty``1(System.Func{``0},``0@,``0)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, a PropertyChanged event is raised for the property name extracted from the property expression.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0@,``0,System.Action,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name obtained by the CallerMemberName attribute and the affected property names.
            This method must be used in a property setter.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0@,``0,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, PropertyChanged events are raised for the property name obtained by the CallerMemberName attribute and the affected property names.
            This method must be used in a property setter.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="affectedPropertyNames">The affected property names.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, a PropertyChanged event is raised for the property name obtained by the CallerMemberName attribute.
            This method must be used in a property setter.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.SetCallerProperty``1(``0@,``0,System.String)">
            <summary>
            Sets a value to the specified storage.
            If it is changed, a PropertyChanged event is raised for the property name obtained by the CallerMemberName attribute.
            This method must be used in a property setter.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="propertyName">The property name that is automatically set by the compiler. DO NOT SPECIFY THIS PARAMETER.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="propertyName">The property name that changed. An Empty value or null indicates that all of the properties have changed. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.OnPropertyChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Raises PropertyChanged events.
            </summary>
            <param name="propertyNames">The property names that changed. Null is not allowed.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.OnPropertyChanged(System.String[])">
            <summary>
            Raises PropertyChanged events.
            </summary>
            <param name="propertyNames">The property names that changed. Null is not allowed.</param>
        </member>
        <member name="E:Nicenis.ComponentModel.WatchableObject.PropertyChanged">
            <summary>
            Occurs when a property value is changed.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.WatchableObject.PropertyNameCache">
            <summary>
            Represents a property name cache for a property getter metadata token.
            </summary>
        </member>
        <member name="F:Nicenis.ComponentModel.WatchableObject.PropertyNameCache.UnsetValue">
            <summary>
            Represents that the property name is not set yet.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.PropertyNameCache.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="metadataToken">The property getter metadata token.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.PropertyNameCache.#ctor(System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="metadataToken">The property getter metadata token.</param>
        </member>
        <member name="P:Nicenis.ComponentModel.WatchableObject.PropertyNameCache.MetadataToken">
            <summary>
            The property getter metadata token.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.WatchableObject.PropertyNameCache.PropertyName">
            <summary>
            The property name.
            If it is the UnsetValue, this means that this property is not set yet.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.WatchableObject.PropertyValue">
            <summary>
            Represents a property value.
            </summary>
        </member>
        <member name="F:Nicenis.ComponentModel.WatchableObject.PropertyValue.UnsetValue">
            <summary>
            Represents that the property value is not set yet.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.WatchableObject.PropertyValue.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:Nicenis.ComponentModel.WatchableObject.PropertyValue.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.WatchableObject.PropertyValue.Value">
            <summary>
            The property value.
            If it is the UnsetValue, this means that this property is not set yet.
            </summary>
        </member>
        <member name="T:Nicenis.WeakEventHandlerInfo">
            <summary>
            Represents event handler information that is weak referenced.
            </summary>
        </member>
        <member name="M:Nicenis.WeakEventHandlerInfo.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instancel.
            </summary>
            <param name="target">The target instance if the event handler is a instance method; otherwise null.</param>
            <param name="methodInfo">The event handler method info.</param>
        </member>
        <member name="P:Nicenis.WeakEventHandlerInfo.WeakTarget">
            <summary>
            The target instance that is weak referenced.
            If the event handler is a static method, the target instance is always null.
            </summary>
        </member>
        <member name="P:Nicenis.WeakEventHandlerInfo.MethodInfo">
            <summary>
            The event handler method info.
            </summary>
        </member>
        <member name="M:Nicenis.WeakEventHandlerInfoExtensions.Add(System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo},System.Object,System.Reflection.MethodInfo)">
            <summary>
            Adds a weak event handler info.
            </summary>
            <param name="weakHandlerInfos">The target weak event handler info collection.</param>
            <param name="target">The target instance if the event handler is a instance method; otherwise null.</param>
            <param name="methodInfo">The event handler method info.</param>
            <returns>A new weak event handler info collection.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandlerInfoExtensions.Add(System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo},System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo})">
            <summary>
            Adds weak event handler infos.
            </summary>
            <param name="weakHandlerInfos">The target weak event handler info collection.</param>
            <param name="weakHandlerInfosToAdd">The weak event handler info to add.</param>
            <returns>A new weak event handler info collection.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandlerInfoExtensions.Remove(System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo},System.Object,System.Reflection.MethodInfo)">
            <summary>
            Removes a weak event handler info.
            </summary>
            <param name="weakHandlerInfos">The target weak event handler info collection.</param>
            <param name="target">The target instance if the event handler is a instance method; otherwise null.</param>
            <param name="methodInfo">The event handler method info.</param>
            <returns>A new weak event handler info collection if the event handler info is removed; otherwise the target weak event handler info collection.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandlerInfoExtensions.Remove(System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo},System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo})">
            <summary>
            Removes weak event handler infos.
            </summary>
            <param name="weakHandlerInfos">The target weak event handler info collection.</param>
            <param name="weakHandlerInfosToRemove">The weak event handler info to remove.</param>
            <returns>A new weak event handler info collection.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandlerInfoExtensions.Invoke(System.Collections.Generic.IEnumerable{Nicenis.WeakEventHandlerInfo},System.Object,System.Object)">
            <summary>
            Invokes event handlers.
            </summary>
            <param name="weakHandlerInfos">The target weak event handler info collection.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
            <returns>A new weak event handler info collection if garbage collected event handler infos are removed; otherwise the target weak event handler info collection.</returns>
        </member>
        <member name="T:Nicenis.WeakEventHandler">
            <summary>
            Provides storage for event handlers that garbage collector can collect.
            </summary>
        </member>
        <member name="M:Nicenis.WeakEventHandler.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Nicenis.WeakEventHandler.op_Addition(Nicenis.WeakEventHandler,System.EventHandler)">
            <summary>
            Adds a event handler to the weak event handler.
            </summary>
            <remarks>
            If you add a static method or a lambda expression that does not access container class's instance member,
            it is not automatically removed even if the container class instance is garbage collected.
            </remarks>
            <param name="weakEventHandler">The target weak event handler.</param>
            <param name="value">The event handler to add.</param>
            <returns>A new weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler.op_Addition(Nicenis.WeakEventHandler,Nicenis.WeakEventHandler)">
            <summary>
            Concatenate two weak event handler.
            </summary>
            <param name="left">The left weak event handler.</param>
            <param name="right">The right weak event handler.</param>
            <returns>The concatenated weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler.op_Subtraction(Nicenis.WeakEventHandler,System.EventHandler)">
            <summary>
            Removes a event handler to the weak event handler.
            </summary>
            <param name="weakEventHandler">The target weak event handler.</param>
            <param name="value">The event handler to remove.</param>
            <returns>A new weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler.op_Subtraction(Nicenis.WeakEventHandler,Nicenis.WeakEventHandler)">
            <summary>
            Removes the weak event handlers of right from the weak event handlers of left.
            </summary>
            <param name="left">The left weak event handler.</param>
            <param name="right">The right weak event handler.</param>
            <returns>A new weak event handler that does not contain the right weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler.Add(System.EventHandler)">
            <summary>
            Adds an event handler.
            </summary>
            <remarks>
            If you add a static method or a lambda expression that does not access container class's instance member,
            it is not automatically removed even if the container class instance is garbage collected.
            </remarks>
            <param name="value">The event handler to add.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler.Add(Nicenis.WeakEventHandler)">
            <summary>
            Adds weak event handlers of a WeakEventHandler instance.
            </summary>
            <remarks>
            If you add a static method or a lambda expression that does not access container class's instance member,
            it is not automatically removed even if the container class instance is garbage collected.
            </remarks>
            <param name="value">The WeakEventHandler instance that contains weak event handlers.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler.Remove(System.EventHandler)">
            <summary>
            Removes an event handler.
            </summary>
            <param name="value">The event handler to remove.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler.Remove(Nicenis.WeakEventHandler)">
            <summary>
            Removes weak event handlers of a WeakEventHandler instance.
            </summary>
            <param name="value">The WeakEventHandler instance that contains weak event handlers.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler.Invoke(System.Object)">
            <summary>
            Invokes event handlers.
            </summary>
            <param name="sender">The event sender.</param>
        </member>
        <member name="T:Nicenis.WeakEventHandler`1">
            <summary>
            Provides storage for event handlers that garbage collector can collect.
            </summary>
            <typeparam name="TEventArgs">The event argument type.</typeparam>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.op_Addition(Nicenis.WeakEventHandler{`0},System.EventHandler{`0})">
            <summary>
            Adds a event handler to the weak event handler.
            </summary>
            <remarks>
            If you add a static method or a lambda expression that does not access container class's instance member,
            it is not automatically removed even if the container class instance is garbage collected.
            </remarks>
            <param name="weakEventHandler">The target weak event handler.</param>
            <param name="value">The event handler to add.</param>
            <returns>A new weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.op_Addition(Nicenis.WeakEventHandler{`0},Nicenis.WeakEventHandler{`0})">
            <summary>
            Concatenate two weak event handler.
            </summary>
            <param name="left">The left weak event handler.</param>
            <param name="right">The right weak event handler.</param>
            <returns>The concatenated weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.op_Subtraction(Nicenis.WeakEventHandler{`0},System.EventHandler{`0})">
            <summary>
            Removes a event handler to the weak event handler.
            </summary>
            <param name="weakEventHandler">The target weak event handler.</param>
            <param name="value">The event handler to remove.</param>
            <returns>A new weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.op_Subtraction(Nicenis.WeakEventHandler{`0},Nicenis.WeakEventHandler{`0})">
            <summary>
            Removes the weak event handlers of right from the weak event handlers of left.
            </summary>
            <param name="left">The left weak event handler.</param>
            <param name="right">The right weak event handler.</param>
            <returns>A new weak event handler that does not contain the right weak event handler.</returns>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.Add(System.EventHandler{`0})">
            <summary>
            Adds an event handler.
            </summary>
            <remarks>
            If you add a static method or a lambda expression that does not access container class's instance member,
            it is not automatically removed even if the container class instance is garbage collected.
            </remarks>
            <param name="value">The event handler to add.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.Add(Nicenis.WeakEventHandler{`0})">
            <summary>
            Adds weak event handlers of a WeakEventHandler instance.
            </summary>
            <remarks>
            If you add a static method or a lambda expression that does not access container class's instance member,
            it is not automatically removed even if the container class instance is garbage collected.
            </remarks>
            <param name="value">The WeakEventHandler instance that contains weak event handlers.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.Remove(System.EventHandler{`0})">
            <summary>
            Removes an event handler.
            </summary>
            <param name="value">The event handler to remove.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.Remove(Nicenis.WeakEventHandler{`0})">
            <summary>
            Removes weak event handlers of a WeakEventHandler instance.
            </summary>
            <param name="value">The WeakEventHandler instance that contains weak event handlers.</param>
        </member>
        <member name="M:Nicenis.WeakEventHandler`1.Invoke(System.Object,`0)">
            <summary>
            Invokes event handlers.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Nicenis.Collections.StaticArray">
            <summary>
            Provides functionalities related to static array.
            </summary>
        </member>
        <member name="M:Nicenis.Collections.StaticArray.Empty``1">
            <summary>
            Returns the singleton empty array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <returns>The singleton empty array.</returns>
        </member>
        <member name="T:Nicenis.Collections.StaticArray.StaticArrayHolder`1">
            <summary>
            Internal holder for static empty arrays.
            </summary>
            <remarks>
            Reference:
            http://stackoverflow.com/questions/151936/does-an-empty-array-in-net-use-any-space
            </remarks>
            <typeparam name="T">The element type of the array.</typeparam>
        </member>
        <member name="F:Nicenis.Collections.StaticArray.StaticArrayHolder`1.Empty">
            <summary>
            The singleton empty array.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.IFreezable">
            <summary>
            Represents an object that can be frozen. If the object is frozen, it is immutable.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.IFreezable.Freeze">
            <summary>
            Makes the current object unmodifiable and sets its IsFrozen property to true.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IFreezable.IsFrozen">
            <summary>
            Gets a value that indicates whether the object is currently modifiable.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.IPropertyValueChangingEventArgs`1">
            <summary>
            Provides data for a property value event handler.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangingEventArgs`1.PropertyName">
            <summary>
            Gets the name of the property that is changing.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangingEventArgs`1.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangingEventArgs`1.NewValue">
            <summary>
            Gets or sets the value of the property that is about to change.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.IPropertyValueChangedEventArgs`1">
            <summary>
            Provides data for a property value event handler.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangedEventArgs`1.PropertyName">
            <summary>
            Gets the name of the property that changed.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangedEventArgs`1.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the value of the property after the change.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.IPropertyValueChangingEventArgs">
            <summary>
            Provides data for a property value changing event handler.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangingEventArgs.PropertyName">
            <summary>
            Gets the name of the property that is changing.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangingEventArgs.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangingEventArgs.NewValue">
            <summary>
            Gets or sets the value of the property that is about to change.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.IPropertyValueChangedEventArgs">
            <summary>
            Provides data for a property value changed event handler.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property that changed.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangedEventArgs.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.IPropertyValueChangedEventArgs.NewValue">
            <summary>
            Gets the value of the property after the change.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.PropertyObservable">
            <summary>
            Provides a base implementation for the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="F:Nicenis.ComponentModel.PropertyObservable.AllPropertyName">
            <summary>
            The property name that represents all properties.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``10(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``4}},System.Linq.Expressions.Expression{System.Func{``5}},System.Linq.Expressions.Expression{System.Func{``6}},System.Linq.Expressions.Expression{System.Func{``7}},System.Linq.Expressions.Expression{System.Func{``8}},System.Linq.Expressions.Expression{System.Func{``9}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T10">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <param name="propertyExpression10">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``9(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``4}},System.Linq.Expressions.Expression{System.Func{``5}},System.Linq.Expressions.Expression{System.Func{``6}},System.Linq.Expressions.Expression{System.Func{``7}},System.Linq.Expressions.Expression{System.Func{``8}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T9">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <param name="propertyExpression9">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``8(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``4}},System.Linq.Expressions.Expression{System.Func{``5}},System.Linq.Expressions.Expression{System.Func{``6}},System.Linq.Expressions.Expression{System.Func{``7}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T8">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <param name="propertyExpression8">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``7(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``4}},System.Linq.Expressions.Expression{System.Func{``5}},System.Linq.Expressions.Expression{System.Func{``6}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T7">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <param name="propertyExpression7">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``6(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``4}},System.Linq.Expressions.Expression{System.Func{``5}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T6">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <param name="propertyExpression6">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``5(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}},System.Linq.Expressions.Expression{System.Func{``4}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T5">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <param name="propertyExpression5">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``4(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}},System.Linq.Expressions.Expression{System.Func{``3}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T4">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <param name="propertyExpression4">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``3(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Linq.Expressions.Expression{System.Func{``2}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T3">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <param name="propertyExpression3">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Enumerates property names extracted from the lambda expressions that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <typeparam name="T2">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <param name="propertyExpression2">The lambda expression that returns the property.</param>
            <returns>The property names extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.ToPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the property name extracted from the lambda expression that return a property.
            </summary>
            <typeparam name="T">The type of the property returned from the lambda expression.</typeparam>
            <param name="propertyExpression">The lambda expression that returns the property.</param>
            <returns>The property name extracted.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.GetFromStorage(System.String)">
            <summary>
            Finds a property value associated with the specified property name.
            If it does not exist, a new added property is returned with the UnsetValue value.
            </summary>
            <param name="propertyName">The property name to find.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.GetProperty``1(System.String,System.Func{``0})">
            <summary>
            Gets the property value specified by the property name.
            If it does not exist, the property value is set to the value returned by the getDefault, and the value is returned.
            </summary>
            <remarks>
            This method searches the internal storage for the property value.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The property name. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
            <param name="getDefault">The function that returns the default value. Null is allowed.</param>
            <returns>The property value if it exists; otherwise the default value or the value returned by the getDefault if the getDefault is not null.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.SetProperty``1(``0,System.String,System.Action{Nicenis.ComponentModel.IPropertyValueChangingEventArgs{``0}},System.Action{Nicenis.ComponentModel.IPropertyValueChangedEventArgs{``0}},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Sets a value to the property specified by the property name.
            If it is changed and the isHidden parameter is false, PropertyChanged events are raised for the property name and the related property names.
            </summary>
            <remarks>
            This method stores the property value in the internal storage.
            </remarks>
            <typeparam name="T">The property type.</typeparam>
            <param name="value">The property value.</param>
            <param name="propertyName">The property name. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
            <param name="onChanging">The callback that is called when the property value is changing. Null is allowed.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="related">The related property names. Null is allowed.</param>
            <param name="isHidden">Whether to suppress raising the PropertyValueChanging, PropertyValueChanged and PropertyChanged events.</param>
            <returns>True if the property is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.SetProperty``1(``0@,``0,System.String,System.Action{Nicenis.ComponentModel.IPropertyValueChangingEventArgs{``0}},System.Action{Nicenis.ComponentModel.IPropertyValueChangedEventArgs{``0}},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Sets a value to the specified storage.
            If it is changed and the isHidden parameter is false, PropertyChanged events are raised for the property name and the related property names.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="storage">The storage to store the property value.</param>
            <param name="value">The property value.</param>
            <param name="propertyName">The property name. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
            <param name="onChanging">The callback that is called when the property value is changing. Null is allowed.</param>
            <param name="onChanged">The callback that is called when the property value is changed. Null is allowed.</param>
            <param name="related">The related property names.</param>
            <param name="isHidden">Whether to suppress raising the PropertyValueChanging, PropertyValueChanged and PropertyChanged events.</param>
            <returns>True if the storage is changed; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyValueChanging(Nicenis.ComponentModel.IPropertyValueChangingEventArgs)">
            <summary>
            Raises a PropertyValueChanging event.
            </summary>
            <param name="e">The property value changed event arguments.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyValueChanging``1(``0,``0,System.String)">
            <summary>
            Raises a PropertyValueChanging event.
            </summary>
            <param name="oldValue">The value of the property before the change.</param>
            <param name="newValue">The value of the property after the change.</param>
            <param name="propertyName">The property name that changed. An Empty value or null indicates that all of the properties have changed. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyValueChanged(Nicenis.ComponentModel.IPropertyValueChangedEventArgs)">
            <summary>
            Raises a PropertyValueChanged event.
            </summary>
            <param name="e">The property value changed event arguments.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyValueChanged``1(``0,``0,System.String)">
            <summary>
            Raises a PropertyValueChanged event.
            </summary>
            <param name="oldValue">The value of the property before the change.</param>
            <param name="newValue">The value of the property after the change.</param>
            <param name="propertyName">The property name that changed. An Empty value or null indicates that all of the properties have changed. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="e">The property changed event arguments.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="propertyName">The property name that changed. An Empty value or null indicates that all of the properties have changed. If this parameter is not specified, the property name obtained by the CallerMemberName attribute is used.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Raises PropertyChanged events.
            </summary>
            <param name="propertyNames">The property names that changed.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.OnPropertyChanged(System.String[])">
            <summary>
            Raises PropertyChanged events.
            </summary>
            <param name="propertyNames">The property names that changed.</param>
        </member>
        <member name="E:Nicenis.ComponentModel.PropertyObservable.PropertyValueChanging">
            <summary>
            Occurs when a property value is changing by the SetProperty methods.
            </summary>
        </member>
        <member name="E:Nicenis.ComponentModel.PropertyObservable.PropertyValueChanged">
            <summary>
            Occurs when a property value is changed by the SetProperty methods.
            </summary>
        </member>
        <member name="E:Nicenis.ComponentModel.PropertyObservable.PropertyChanged">
            <summary>
            Occurs when a property value is changed.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.PropertyObservable.PropertyValueChangeEventArgs`1">
            <summary>
            The event arguments for property value change related events.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.PropertyValueChangeEventArgs`1.#ctor(System.String,`0,`0)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The value of the property before the change.</param>
            <param name="newValue">The value of the property after the change.</param>
        </member>
        <member name="P:Nicenis.ComponentModel.PropertyObservable.PropertyValueChangeEventArgs`1.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.PropertyObservable.PropertyValueChangeEventArgs`1.NewValue">
            <summary>
            Gets or sets the value of the property after the change.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.PropertyObservable.PropertyValue">
            <summary>
            Represents a property value.
            </summary>
        </member>
        <member name="F:Nicenis.ComponentModel.PropertyObservable.PropertyValue.UnsetValue">
            <summary>
            Represents that the property value is not set yet.
            </summary>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The property name.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Nicenis.ComponentModel.PropertyObservable.PropertyValue.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:Nicenis.ComponentModel.PropertyObservable.PropertyValue.Name">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Nicenis.ComponentModel.PropertyObservable.PropertyValue.Value">
            <summary>
            The property value.
            If it is the UnsetValue, this means that this property is not set yet.
            </summary>
        </member>
        <member name="T:Nicenis.ComponentModel.PropertyObservable.PropertyValueChangingEventHandler">
            <summary>
            The event handler delegate for the PropertyValueChanging event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Nicenis.ComponentModel.PropertyObservable.PropertyValueChangedEventHandler">
            <summary>
            The event handler delegate for the PropertyValueChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Nicenis.Disposable">
            <summary>
            Provides base implementation of the IDisposable interface.
            </summary>
        </member>
        <member name="M:Nicenis.Disposable.DisposeOverride(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            Derived classes should override this method.
            If this method is called, it is not called again.
            </summary>
            <param name="disposing">If this method is called by a user's code.</param>
        </member>
        <member name="M:Nicenis.Disposable.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">If this method is called by a user's code.</param>
        </member>
        <member name="M:Nicenis.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Nicenis.Disposable.Finalize">
            <summary>
            The standard dispose destructor.
            </summary>
        </member>
        <member name="P:Nicenis.Disposable.IsDisposed">
            <summary>
            Returns true if it is already disposed.
            </summary>
        </member>
        <member name="T:Nicenis.Interop.Win32">
            <summary>
            Provides Win32 API Interop related codes.
            </summary>
        </member>
        <member name="T:Nicenis.Security.Cryptography.StringHasherAlgorithm">
            <summary>
            The hash algorithm that is used to compute hash for the input string.
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringHasherAlgorithm.MD5">
            <summary>
            128 bit MD5
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringHasherAlgorithm.SHA1">
            <summary>
            160 bit
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringHasherAlgorithm.SHA2_256">
            <summary>
            256 bit SHA2
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringHasherAlgorithm.SHA2_384">
            <summary>
            384 bit SHA2
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringHasherAlgorithm.SHA2_512">
            <summary>
            512 bit SHA2
            </summary>
        </member>
        <member name="T:Nicenis.Security.Cryptography.StringHasher">
            <summary>
            This class converts a string into a hash string.
            The input string is converted into UTF-8 before being hashed
            and the hash output is encoded by Base64.
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringHasher.DefaultAlgorithm">
            <summary>
            The default hash algorithm that is used to compute hash for the input string.
            </summary>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringHasher.#ctor(Nicenis.Security.Cryptography.StringHasherAlgorithm)">
            <summary>
            Creates a new StringHasher instance.
            </summary>
            <param name="algorithm">The hash algorithm that is used to compute hash for the input string.</param>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringHasher.#ctor">
            <summary>
            Creates a new StringHasher instance.
            </summary>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringHasher.Compute(System.String)">
            <summary>
            Computes the hash string.
            The input string is converted into UTF-8 before being hashed and the hash output is encoded by Base64.
            </summary>
            <param name="value">A string to hash. It is converted into UTF-8 before being hashed. Null is regarded as an empty string.</param>
            <returns>The hashed string.</returns>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringHasher.UTF8Encoding">
            <summary>
            An instance for UTF8Encoding.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringHasher.HashAlgorithm">
            <summary>
            An instance for HashAlgorithm.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringHasher.Algorithm">
            <summary>
            The hash algorithm that is used to compute hash for the input string.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringHasher.Size">
            <summary>
            The hash size in bits.
            </summary>
        </member>
        <member name="T:Nicenis.Security.Cryptography.StringEncrypterKeyHashAlgorithm">
            <summary>
            The hash algorithm that is used to compute hash for the encryption key.
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringEncrypterKeyHashAlgorithm.MD5">
            <summary>
            128 bit MD5
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringEncrypterKeyHashAlgorithm.SHA2_256">
            <summary>
            256 bit SHA2
            </summary>
        </member>
        <member name="T:Nicenis.Security.Cryptography.StringEncrypter">
            <summary>
            This class converts a string into a cipher string, and vice versa.
            It uses 128/256 bit AES Algorithm in the Cipher Block Chaining (CBC) mode.
            Key is hashed by MD5 or SHA2-256. If the key is hashed by MD5, 128 bit AES is used.
            If the key is hashed by SHA2-256, 256 bit AES is used. Initialization vector is hashed by MD5.
            PKCS7Padding is used as a padding mode and the binary output is encoded by Base64.
            All strings are converted into UTF-8 before encryption or hash.
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringEncrypter.DefaultKeyHashAlgorithm">
            <summary>
            The default hash algorithm that is used to compute hash for the encryption key.
            </summary>
        </member>
        <member name="F:Nicenis.Security.Cryptography.StringEncrypter._isTouched">
            <summary>
            Whether the key hash algorithm or the key or the IV is modified
            </summary>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringEncrypter.#ctor(Nicenis.Security.Cryptography.StringEncrypterKeyHashAlgorithm,System.String,System.String)">
            <summary>
            Creates a new StringEncrypter instance.
            </summary>
            <param name="keyHashAlgorithm">The hash algorithm that is used to compute hash for the encryption key.</param>
            <param name="key">The secret key string. Null or an empty string is not allowed.</param>
            <param name="iv">The initialization vector string. If this value is NULL, IV filled with zeros is used.</param>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringEncrypter.#ctor(System.String,System.String)">
            <summary>
            Creates a new StringEncrypter instance.
            </summary>
            <param name="key">The secret key string. Null or an empty string is not allowed.</param>
            <param name="iv">The initialization vector string. If this value is NULL, IV filled with zeros is used.</param>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringEncrypter.#ctor">
            <summary>
            Creates a new StringEncrypter instance.
            The Key must be set before encrypting or decrypting a string.
            </summary>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringEncrypter.Prepare">
            <summary>
            Prepares required values.
            </summary>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringEncrypter.Encrypt(System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="value">A string to encrypt. It is converted into UTF-8 before being encrypted. Null is regarded as an empty string.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Nicenis.Security.Cryptography.StringEncrypter.Decrypt(System.String)">
            <summary>
            Decrypts a string which is encrypted with the same key, key hash algorithm and initialization vector. 
            </summary>
            <param name="value">A string to decrypt. It must be a string encrypted with the same key, key hash algorithm and initialization vector. Null or an empty string is not allowed.</param>
            <returns>The decrypted string</returns>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.UTF8Encoding">
            <summary>
            An instance for UTF8Encoding.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.Rijndael">
            <summary>
            An instance for AES encryption.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.MD5">
            <summary>
            An instance for MD5 hash.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.SHA256">
            <summary>
            An instance for SHA2-256 hash.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.KeyHashAlgorithm">
            <summary>
            The hash algorithm that is used to compute hash for the encryption key.
            MD5 and SHA2-256 are supported.
            This value determines the AES key size.
            If the hash outputs 128 bit value, 128 bit AES is used.
            if the hash outputs 256 bit value, 256 bit AES is used.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.KeySize">
            <summary>
            The encryption key size in bits.
            This value depends on the key hash algorithm.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.Key">
            <summary>
            The secret key string.
            The key string is converted into UTF-8 and hashed by the specified key hash algorithm.
            Null or an empty string is not allowed.
            </summary>
        </member>
        <member name="P:Nicenis.Security.Cryptography.StringEncrypter.IV">
            <summary>
            The initialization vector string.
            The initialization vector string is converted into UTF-8 and hashed by MD5.
            If this value is NULL, IV filled with zeros is used.
            </summary>
        </member>
        <member name="T:Nicenis.Booleany">
            <summary>
            Provides utility methods related to Truthy and Falsy.
            </summary>
        </member>
        <member name="M:Nicenis.Booleany.IsTruthy(System.Object)">
            <summary>
            Indicates whether the specified value is a truthy value.
            </summary>
            <remarks>
            The truthy/falsy concept is originated from the JavaScript.
            There are seven values that are falsy: null, 0, false, NaN, DBNull, an empty string and an empty collection.
            </remarks>
            <param name="value">The value to evaluate.</param>
            <returns>True if it is a truthy value; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Booleany.IsFalsy(System.Object)">
            <summary>
            Indicates whether the specified value is a falsy value.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
            <param name="value">The value to evaluate.</param>
            <returns>True if it is a falsy value; otherwise, false.</returns>
        </member>
        <member name="T:Nicenis.Windows.Controls.VoidButton">
            <summary>
            Represents a button without any visual element.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Controls.VoidButton.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Controls.VoidButton.#ctor">
            <summary>
            Initializes a new instance of the VoidButton class.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.TruthyToCollapsedConverter">
            <summary>
            Returns Visibility.Collapsed if the input value is truthy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.TruthyToFalseConverter">
            <summary>
            Returns false if the input value is truthy; otherwise, true.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.TruthyToHiddenConverter">
            <summary>
            Returns Visibility.Hidden if the input value is truthy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.TruthyToTrueConverter">
            <summary>
            Returns true if the input value is truthy; otherwise, false.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.TruthyToVisibleConverter">
            <summary>
            Returns Visibility.Visible if the input value is truthy; otherwise, Visibility.Collapsed.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.TruthyToVisibleOtherwiseHiddenConverter">
            <summary>
            Returns Visibility.Visible if the input value is truthy; otherwise, Visibility.Hidden.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllTruthyToCollapsedConverter">
            <summary>
            Returns Visibility.Collapsed if all input values are truthy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllTruthyToFalseConverter">
            <summary>
            Returns false if all input values are truthy; otherwise, true.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllTruthyToHiddenConverter">
            <summary>
            Returns Visibility.Hidden if all input values are truthy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllTruthyToTrueConverter">
            <summary>
            Returns true if all input values are truthy; otherwise, false.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllTruthyToVisibleConverter">
            <summary>
            Returns Visibility.Visible if all input values are truthy; otherwise, Visibility.Collapsed.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllTruthyToVisibleOtherwiseHiddenConverter">
            <summary>
            Returns Visibility.Visible if all input values are truthy; otherwise, Visibility.Hidden.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyTruthyToCollapsedConverter">
            <summary>
            Returns Visibility.Collapsed if there is a truthy value in the input; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyTruthyToFalseConverter">
            <summary>
            Returns false if there is a truthy value in the input; otherwise, true.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyTruthyToHiddenConverter">
            <summary>
            Returns Visibility.Hidden if there is a truthy value in the input; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyTruthyToTrueConverter">
            <summary>
            Returns true if there is a truthy value in the input; otherwise, false.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyTruthyToVisibleConverter">
            <summary>
            Returns Visibility.Visible if there is a truthy value in the input; otherwise, Visibility.Collapsed.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyTruthyToVisibleOtherwiseHiddenConverter">
            <summary>
            Returns Visibility.Visible if there is a truthy value in the input; otherwise, Visibility.Hidden.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.IDataObjectProvider">
            <summary>
            Provides a way to get a data object that contains the data being dragged.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.IDataObjectProvider.GetDataObject">
            <summary>
            Gets a data object that contains the data being dragged.
            </summary>
            <returns>A data object that contains the data being dragged.</returns>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.FalsyToCollapsedConverter">
            <summary>
            Returns Visibility.Collapsed if the input value is falsy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.FalsyToFalseConverter">
            <summary>
            Returns false if the input value is falsy; otherwise, true.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.FalsyToHiddenConverter">
            <summary>
            Returns Visibility.Hidden if the input value is falsy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.FalsyToTrueConverter">
            <summary>
            Returns true if the input value is falsy; otherwise, false.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.FalsyToVisibleConverter">
            <summary>
            Returns Visibility.Visible if the input value is falsy; otherwise, Visibility.Collapsed.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.FalsyToVisibleOtherwiseHiddenConverter">
            <summary>
            Returns Visibility.Visible if the input value is falsy; otherwise, Visibility.Hidden.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllFalsyToCollapsedConverter">
            <summary>
            Returns Visibility.Collapsed if all input values are falsy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllFalsyToFalseConverter">
            <summary>
            Returns false if all input values are falsy; otherwise, true.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllFalsyToHiddenConverter">
            <summary>
            Returns Visibility.Hidden if all input values are falsy; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllFalsyToTrueConverter">
            <summary>
            Returns true if all input values are falsy; otherwise, false.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllFalsyToVisibleConverter">
            <summary>
            Returns Visibility.Visible if all input values are falsy; otherwise, Visibility.Collapsed.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AllFalsyToVisibleOtherwiseHiddenConverter">
            <summary>
            Returns Visibility.Visible if all input values are falsy; otherwise, Visibility.Hidden.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyFalsyToCollapsedConverter">
            <summary>
            Returns Visibility.Collapsed if there is a falsy value in the input; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyFalsyToFalseConverter">
            <summary>
            Returns false if there is a falsy value in the input; otherwise, true.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyFalsyToHiddenConverter">
            <summary>
            Returns Visibility.Hidden if there is a falsy value in the input; otherwise, Visibility.Visible.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyFalsyToTrueConverter">
            <summary>
            Returns true if there is a falsy value in the input; otherwise, false.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyFalsyToVisibleConverter">
            <summary>
            Returns Visibility.Visible if there is a falsy value in the input; otherwise, Visibility.Collapsed.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.Data.Converters.AnyFalsyToVisibleOtherwiseHiddenConverter">
            <summary>
            Returns Visibility.Visible if there is a falsy value in the input; otherwise, Visibility.Hidden.
            </summary>
            <seealso cref="M:Nicenis.Booleany.IsTruthy(System.Object)"/>
        </member>
        <member name="T:Nicenis.Windows.DragInitiator">
            <summary>
            Defines drag initiator.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiator.MouseLeftButton">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiator.MouseMiddleButton">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiator.MouseRightButton">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiator.MouseXButton1">
            <summary>
            The first extended mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiator.MouseXButton2">
            <summary>
            The second extended mouse button.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragInitiators">
            <summary>
            Defines bitwise-ored drag initiators.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.MouseLeftButton">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.MouseMiddleButton">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.MouseRightButton">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.MouseXButton1">
            <summary>
            The first extended mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.MouseXButton2">
            <summary>
            The second extended mouse button.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.Mouse">
            <summary>
            All mouse related drag initiators.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragInitiators.All">
            <summary>
            All drag initiators.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragInitiatorHelper">
            <summary>
            Provides utility methods for DragInitiator.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragInitiatorHelper.ToDragInitiator(System.Windows.Input.MouseButton)">
            <summary>
            Converts a MouseButton enumeration to a DragInitiator enumeration.
            </summary>
            <param name="mouseButton">The MouseButton enumeration.</param>
            <returns>The converted DragInitiator.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragInitiatorHelper.ToDragInitiators(System.Windows.Input.MouseButton)">
            <summary>
            Converts a MouseButton enumeration to a DragInitiators enumeration.
            </summary>
            <param name="mouseButton">The MouseButton enumeration.</param>
            <returns>The converted DragInitiators.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragInitiatorHelper.ToDragInitiators(Nicenis.Windows.DragInitiator)">
            <summary>
            Converts a DragInitiator enumeration to a DragInitiators enumeration.
            </summary>
            <param name="dragInitiator">The DragInitiator enumeration.</param>
            <returns>The converted DragInitiators.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragInitiatorHelper.ToMouseButton(Nicenis.Windows.DragInitiator)">
            <summary>
            Converts a DragInitiator enumeration to a MouseButton enumeration.
            </summary>
            <param name="dragInitiator">The DragInitiator enumeration.</param>
            <returns>The converted MouseButton.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragInitiatorHelper.IsActive(Nicenis.Windows.DragInitiator)">
            <summary>
            Returns whether device state specified by the dragInitiator is active.
            </summary>
            <param name="dragInitiator">The DragInitiator enumeration.</param>
            <returns>True if it is active; otherwise false.</returns>
        </member>
        <member name="T:Nicenis.Windows.DragSourceEventArgsBase">
            <summary>
            Internal Use Only.
            The base class for DragSource related event argument classes.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceEventArgsBase.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the DragResizerEventArgsBase class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSourceEventArgsBase.Initiator">
            <summary>
            Gets a value that initiates the dragging.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceEventArgsBase.ContactPosition">
            <summary>
            Gets the contact position in the dragged source.
            </summary>
            <remarks>
            This value indicates the coordiate of the click or any other contact in the dragged source.
            It is in the dragged source cooridates.
            </remarks>
        </member>
        <member name="P:Nicenis.Windows.DragSourceEventArgsBase.DraggedPosition">
            <summary>
            Gets the dragged position in the dragged source.
            </summary>
            <remarks>
            This value indicates the coordiate that the dragging is started.
            MinimumHorizontalDragDistance and MinimumVerticalDragDistance are used to calculate this value.
            It is in the dragged source cooridates.
            </remarks>
            <seealso cref="F:Nicenis.Windows.DragSource.MinimumHorizontalDragDistanceProperty"/>
            <seealso cref="F:Nicenis.Windows.DragSource.MinimumVerticalDragDistanceProperty"/>
        </member>
        <member name="T:Nicenis.Windows.DragSourceDragSensingEventArgs">
            <summary>
            Contains arguments for the DragSensing event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceDragSensingEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the DragSourceDragSensingEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDragSensingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the drag should be canceled.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.IDragSourceDraggingEventArgsContext">
            <summary>
            Defines required infomation for the Dragging event.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSourceDraggingEventArgs">
            <summary>
            Contains arguments for the Dragging event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceDraggingEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceDraggingEventArgsContext)">
            <summary>
            Initializes a new instance of the DragSourceDraggingEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context that contains required information for the Dragging event. Null is not allowed.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the drag should be canceled.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.AllowedEffects">
            <summary>
            Gets or sets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.Data">
            <summary>
            Gets or sets a data object that contains the data being dragged.
            If IDataObjectProvider is implemented by the set value, it is used right before DragDrop.DoDragDrop call.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.IsAutoVisualFeedbackAllowed">
            <summary>
            Gets or sets a value that indicates whether the auto generated visual feedback is allowed or not.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedback">
            <summary>
            Gets or sets an object that is set to the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackTemplate">
            <summary>
            Gets or sets a data template used to display the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackTemplateSelector">
            <summary>
            Gets or sets a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackDataContext">
            <summary>
            Gets or sets an object that is set to the data context of the visual drag feedback.
            If this value is null, the drag source's data context is set.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackOffset">
            <summary>
            Gets or sets an offset that is pointed by a pointing device in the visual drag feedback.
            The origin is the upper-left corner of the visual drag feedback.
            The x-coordinates increase to the right. The y-coordinates increase to the bottom.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackOpacity">
            <summary>
            Gets or sets the opacity of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackVisibility">
            <summary>
            Gets or sets the visual drag feedback visibility.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackWidth">
            <summary>
            Gets or sets the width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackHeight">
            <summary>
            Gets or sets the height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackMinWidth">
            <summary>
            Gets or sets the minimum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackMinHeight">
            <summary>
            Gets or sets the minimum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackMaxWidth">
            <summary>
            Gets or sets the maximum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggingEventArgs.VisualFeedbackMaxHeight">
            <summary>
            Gets or sets the maximum height of the visual drag feedback.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.IDragSourceGiveFeedbackEventArgsContext">
            <summary>
            Defines required infomation for the GiveFeedback event.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSourceGiveFeedbackEventArgs">
            <summary>
            Contains arguments for the GiveFeedback event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceGiveFeedbackEventArgsContext,System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Initializes a new instance of the DragSourceGiveFeedbackEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context that contains required information for the GiveFeedback event. Null is not allowed.</param>
            <param name="giveFeedbackEventArgs">The GiveFeedbackEventArgs.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.AllowedEffects">
            <summary>
            Gets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.Data">
            <summary>
            Gets a data object that contains the data being dragged.
            This value is always not null.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.Effects">
            <summary>
            Gets a value that indicates the effects of drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.UseDefaultCursors">
            <summary>
            Gets or sets a Boolean value indicating whether default cursor feedback behavior should be used for the associated drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.IsAutoVisualFeedbackAllowed">
            <summary>
            Gets or sets a value that indicates whether the auto generated visual feedback is allowed or not.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedback">
            <summary>
            Gets or sets an object that is set to the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackTemplate">
            <summary>
            Gets or sets a data template used to display the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackTemplateSelector">
            <summary>
            Gets or sets a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackDataContext">
            <summary>
            Gets or sets an object that is set to the data context of the visual drag feedback.
            If this value is null, the drag source's data context is set.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackOffset">
            <summary>
            Gets or sets an offset that is pointed by a pointing device in the visual drag feedback.
            The origin is the upper-left corner of the visual drag feedback.
            The x-coordinates increase to the right. The y-coordinates increase to the bottom.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackOpacity">
            <summary>
            Gets or sets the opacity of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackVisibility">
            <summary>
            Gets or sets the visual drag feedback visibility.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackWidth">
            <summary>
            Gets or sets the width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackHeight">
            <summary>
            Gets or sets the height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackMinWidth">
            <summary>
            Gets or sets the minimum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackMinHeight">
            <summary>
            Gets or sets the minimum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackMaxWidth">
            <summary>
            Gets or sets the maximum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceGiveFeedbackEventArgs.VisualFeedbackMaxHeight">
            <summary>
            Gets or sets the maximum height of the visual drag feedback.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.IDragSourceQueryContinueDragEventArgsContext">
            <summary>
            Defines required infomation for the QueryContinueDrag event.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSourceQueryContinueDragEventArgs">
            <summary>
            Contains arguments for the QueryContinueDrag event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceQueryContinueDragEventArgsContext,System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Initializes a new instance of the DragSourceQueryContinueDragEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context that contains required information for the QueryContinueDrag event. Null is not allowed.</param>
            <param name="queryContinueDragEventArgs">The QueryContinueDragEventArgs.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.AllowedEffects">
            <summary>
            Gets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.Data">
            <summary>
            Gets a data object that contains the data being dragged.
            This value is always not null.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.Action">
            <summary>
            Gets or sets the current status of the associated drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.EscapePressed">
            <summary>
            Gets a Boolean value indicating whether the ESC key has been pressed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.KeyStates">
            <summary>
            Gets a Boolean value indicating whether the ESC key has been pressed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.IsAutoVisualFeedbackAllowed">
            <summary>
            Gets or sets a value that indicates whether the auto generated visual feedback is allowed or not.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedback">
            <summary>
            Gets or sets an object that is set to the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackTemplate">
            <summary>
            Gets or sets a data template used to display the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackTemplateSelector">
            <summary>
            Gets or sets a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackDataContext">
            <summary>
            Gets or sets an object that is set to the data context of the visual drag feedback.
            If this value is null, the drag source's data context is set.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackOffset">
            <summary>
            Gets or sets an offset that is pointed by a pointing device in the visual drag feedback.
            The origin is the upper-left corner of the visual drag feedback.
            The x-coordinates increase to the right. The y-coordinates increase to the bottom.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackOpacity">
            <summary>
            Gets or sets the opacity of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackVisibility">
            <summary>
            Gets or sets the visual drag feedback visibility.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackWidth">
            <summary>
            Gets or sets the width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackHeight">
            <summary>
            Gets or sets the height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackMinWidth">
            <summary>
            Gets or sets the minimum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackMinHeight">
            <summary>
            Gets or sets the minimum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackMaxWidth">
            <summary>
            Gets or sets the maximum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceQueryContinueDragEventArgs.VisualFeedbackMaxHeight">
            <summary>
            Gets or sets the maximum height of the visual drag feedback.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.IDragSourceDraggedEventArgsContext">
            <summary>
            Defines required infomation for the Dragged event.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSourceDraggedEventArgs">
            <summary>
            Contains arguments for the Dragged event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceDraggedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceDraggedEventArgsContext,System.Windows.DragDropEffects)">
            <summary>
            Initializes a new instance of the DragSourceDraggedEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context that contains required information for the Dropped event. Null is not allowed.</param>
            <param name="finalEffects">One of the DragDropEffects values that specifies the final effect that was performed during the drag-and-drop operation.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.AllowedEffects">
            <summary>
            Gets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.Data">
            <summary>
            Gets a data object that contains the data being dragged.
            This value is always not null.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.IsAutoVisualFeedbackAllowed">
            <summary>
            Gets a value that indicates whether the auto generated visual feedback is allowed or not.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedback">
            <summary>
            Gets an object that is set to the content of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackTemplate">
            <summary>
            Gets a data template used to display the content of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackTemplateSelector">
            <summary>
            Gets the template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackDataContext">
            <summary>
            Gets an object that is set to the data context of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackOffset">
            <summary>
            Gets the offset that is pointed by a pointing device in the visual drag feedback.
            The origin is the upper-left corner of the visual drag feedback.
            The x-coordinates increase to the right. The y-coordinates increase to the bottom.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackOpacity">
            <summary>
            Gets the opacity of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackVisibility">
            <summary>
            Gets the visual feedback drag visibility.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackWidth">
            <summary>
            Gets the width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackHeight">
            <summary>
            Gets the height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackMinWidth">
            <summary>
            Gets the minimum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackMinHeight">
            <summary>
            Gets the minimum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackMaxWidth">
            <summary>
            Gets the maximum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.VisualFeedbackMaxHeight">
            <summary>
            Gets the maximum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSourceDraggedEventArgs.FinalEffects">
            <summary>
            Gets the final effect that was performed during the drag-and-drop operation.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSourceDroppedEventArgs">
            <summary>
            Contains arguments for the Dropped event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSourceDroppedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceDraggedEventArgsContext,System.Windows.DragDropEffects)">
            <summary>
            Initializes a new instance of the DragSourceDroppedEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context that contains required information for the Dropped event. Null is not allowed.</param>
            <param name="finalEffects">One of the DragDropEffects values that specifies the final effect that was performed during the drag-and-drop operation.</param>
        </member>
        <member name="T:Nicenis.Windows.DragSource">
            <summary>
            Provides functionalities to make an element draggable.
            </summary>
            <remarks>
            The AllowDrag attached property is used to specify an element to drag.
            A data object to transfer must be set by using the Data attached property or the Data property of related event arguments.
            </remarks>
        </member>
        <member name="F:Nicenis.Windows.DragSource.ContextProperty">
            <summary>
            The attached property to store internal context information.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets a value that stores internal context information.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
            <returns>A Context instance.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetContext(System.Windows.DependencyObject,Nicenis.Windows.DragSource.Context)">
            <summary>
            Sets a value that stores internal context information.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
            <param name="value">A Context instance.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetSafeContext(System.Windows.UIElement)">
            <summary>
            Gets a value that stores internal context information.
            If it is not set, new context is created and set.
            </summary>
            <param name="obj">A UIElement instance.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.AllowDragProperty">
            <summary>
            The attached property to indicate whether the element is draggable.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetAllowDrag(System.Windows.UIElement)">
            <summary>
            Gets a value that indicates whether the element is draggable.
            </summary>
            <param name="obj">The target element.</param>
            <returns>True if it is draggable; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetAllowDrag(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether the element is draggable.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether the element is draggable.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.AllowedInitiatorsProperty">
            <summary>
            The attached property to specified allowed drag initiators.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetAllowedInitiators(System.Windows.DependencyObject)">
            <summary>
            Gets a value that specifies allowed drag initiators.
            </summary>
            <param name="obj">The target element.</param>
            <returns>Allowed drag initiators.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetAllowedInitiators(System.Windows.DependencyObject,Nicenis.Windows.DragInitiators)">
            <summary>
            Sets a value that specifies allowed drag initiators.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that specifies allowed drag initiators.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DataProperty">
            <summary>
            The attached property for a data object that contains the data being dragged.
            If IDataObjectProvider is implemented by the set value, it is used right before DragDrop.DoDragDrop call.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetData(System.Windows.DependencyObject)">
            <summary>
            Gets a data object that contains the data being dragged.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A data object that contains the data being dragged.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetData(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets a data object that contains the data being dragged.
            If IDataObjectProvider is implemented by the set value, it is used right before DragDrop.DoDragDrop call.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A data object that contains the data being dragged.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.IsAutoVisualFeedbackAllowedProperty">
            <summary>
            The attached property to indicate whether auto visual feedback is allowed or not.
            </summary>
            <remarks>
            DragSource displays a generated visual drag feedback if any visual feedback related property is not set.
            This property turns off the visual drag feedback.
            </remarks>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetIsAutoVisualFeedbackAllowed(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates whether auto visual feedback is allowed or not.
            </summary>
            <param name="obj">The target element.</param>
            <returns>True if auto visual feedback is allowed; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetIsAutoVisualFeedbackAllowed(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value that indicates whether auto visual feedback is allowed or not.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether auto visual feedback is allowed or not.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackProperty">
            <summary>
            The attached property for an object that is set to the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedback(System.Windows.DependencyObject)">
            <summary>
            Gets an object that is set to the content of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>An object that is set to the content of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedback(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets an object that is set to the content of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">An object that is set to the content of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackTemplateProperty">
            <summary>
            The attached property for a data template used to display the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackTemplate(System.Windows.DependencyObject)">
            <summary>
            Gets a data template used to display the content of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A data template used to display the content of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            Sets a data template used to display the content of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A data template used to display the content of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackTemplateSelectorProperty">
            <summary>
            The attached property for a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackTemplateSelector(System.Windows.DependencyObject)">
            <summary>
            Gets a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackTemplateSelector(System.Windows.DependencyObject,System.Windows.Controls.DataTemplateSelector)">
            <summary>
            Sets a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackDataContextProperty">
            <summary>
            The attached property for an object that is set to the data context of the visual drag feedback.
            If this value is null, the drag source's data context is set.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackDataContext(System.Windows.DependencyObject)">
            <summary>
            Gets an object that is set to the data context of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>An object that is set to the data context of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackDataContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets an object that is set to the data context of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">An object that is set to the data context of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackOffsetProperty">
            <summary>
            The attached property for an offset that is pointed by a pointing device in the visual drag feedback.
            The origin is the upper-left corner of the visual drag feedback.
            The x-coordinates increase to the right. The y-coordinates increase to the bottom.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackOffset(System.Windows.DependencyObject)">
            <summary>
            Gets an offset that is pointed by a pointing device in the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>An offset that is pointed by a pointing device in the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackOffset(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets an offset that is pointed by a pointing device in the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">An offset that is pointed by a pointing device in the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackOpacityProperty">
            <summary>
            The attached property for the opacity of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackOpacity(System.Windows.DependencyObject)">
            <summary>
            Gets the opacity of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The opacity of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackOpacity(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the opacity of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The opacity of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackVisibilityProperty">
            <summary>
            The attached property for the visual drag feedback visibility.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the visual drag feedback visibility.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The visual drag feedback visibility.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the visual drag feedback visibility.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The visual drag feedback visibility.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackWidthProperty">
            <summary>
            The attached property for the width of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the width of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The width of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the width of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The width of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackHeightProperty">
            <summary>
            The attached property for the height of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the height of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The height of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the height of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The height of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackMinWidthProperty">
            <summary>
            The attached property for the minimum width of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackMinWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the minimum width of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The minimum width of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackMinWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the minimum width of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The minimum width of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackMinHeightProperty">
            <summary>
            The attached property for the minimum height of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackMinHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the minimum height of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The minimum height of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackMinHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the minimum height of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The minimum height of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackMaxWidthProperty">
            <summary>
            The attached property for the maximum width of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackMaxWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the maximum width of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The maximum width of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackMaxWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the maximum width of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The maximum width of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.VisualFeedbackMaxHeightProperty">
            <summary>
            The attached property for the maximum height of the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetVisualFeedbackMaxHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the maximum height of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The maximum height of the visual drag feedback.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetVisualFeedbackMaxHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the maximum height of the visual drag feedback.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The maximum height of the visual drag feedback.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.InitiatorPropertyKey">
            <summary>
            The readonly attached property key for a value that initiates the dragging.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragSource.InitiatorProperty">
            <summary>
            The readonly attached property for a value that initiates the dragging.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetInitiator(System.Windows.DependencyObject)">
            <summary>
            Gets a value that initiates the dragging.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that initiates the dragging.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetInitiator(System.Windows.DependencyObject,Nicenis.Windows.DragInitiator)">
            <summary>
            Sets a value that initiates the dragging.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that initiates the dragging.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.ContactPositionPropertyKey">
            <summary>
            The readonly attached property key for the contact position in the dragged source.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragSource.ContactPositionProperty">
            <summary>
            The readonly attached property for the contact position in the dragged source.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetContactPosition(System.Windows.DependencyObject)">
            <summary>
            Gets the contact position in the dragged source.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The contact position in the dragged source.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetContactPosition(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the contact position in the dragged source.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The contact position in the dragged source.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DraggedPositionPropertyKey">
            <summary>
            The readonly attached property key for the dragged position in the dragged source.
            </summary>
            <remarks>
            This value indicates the coordiate that the dragging is started.
            MinimumHorizontalDragDistance and MinimumVerticalDragDistance are used to calculate this value.
            It is in the dragged source cooridates.
            </remarks>
            <seealso cref="F:Nicenis.Windows.DragSource.MinimumHorizontalDragDistanceProperty"/>
            <seealso cref="F:Nicenis.Windows.DragSource.MinimumVerticalDragDistanceProperty"/>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DraggedPositionProperty">
            <summary>
            The readonly attached property for the dragged position in the dragged source.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetDraggedPosition(System.Windows.DependencyObject)">
            <summary>
            Gets the dragged position in the dragged source.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The dragged position in the dragged source.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetDraggedPosition(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the dragged position in the dragged source.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The dragged position in the dragged source.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.AllowedEffectsProperty">
            <summary>
            The attached property for a value indicating permitted effects of the drag-and-drop operation.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetAllowedEffects(System.Windows.DependencyObject)">
            <summary>
            Gets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value indicating permitted effects of the drag-and-drop operation.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetAllowedEffects(System.Windows.DependencyObject,System.Windows.DragDropEffects)">
            <summary>
            Sets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value indicating permitted effects of the drag-and-drop operation.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.MinimumHorizontalDragDistanceProperty">
            <summary>
            The attached property for the width of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetMinimumHorizontalDragDistance(System.Windows.UIElement)">
            <summary>
            Gets the width of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The width of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetMinimumHorizontalDragDistance(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the width of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The width of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.MinimumVerticalDragDistanceProperty">
            <summary>
            The attached property for the height of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetMinimumVerticalDragDistance(System.Windows.UIElement)">
            <summary>
            Gets the height of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The height of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetMinimumVerticalDragDistance(System.Windows.UIElement,System.Double)">
            <summary>
            Sets the height of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The height of a rectangle centered on a drag point to allow for limited movement of the pointer before a drag operation begins.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.IsDraggingPropertyKey">
            <summary>
            The readonly attached property key for a value that indicates whether the drag is in progress.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragSource.IsDraggingProperty">
            <summary>
            The readonly attached property for a value that indicates whether the drag is in progress.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.GetIsDragging(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates whether the drag is in progress.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that indicates whether the drag is in progress.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.SetIsDragging(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value that indicates whether the drag is in progress.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether the drag is in progress.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.PreviewDragSensingEvent">
            <summary>
            Identifies the PreviewDragSensing routed event that is raised when drag gesture recognition is in progress.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddPreviewDragSensingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDragSensingEventArgs})">
            <summary>
            Adds an event handler for the PreviewDragSensing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemovePreviewDragSensingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDragSensingEventArgs})">
            <summary>
            Removes the event handler for the PreviewDragSensing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DragSensingEvent">
            <summary>
            Identifies the DragSensing routed event that is raised when drag gesture recognition is in progress.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddDragSensingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDragSensingEventArgs})">
            <summary>
            Adds an event handler for the DragSensing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemoveDragSensingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDragSensingEventArgs})">
            <summary>
            Removes the event handler for the DragSensing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RaiseDragSensingEvent(System.Windows.UIElement,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point)">
            <summary>
            Raises the PreviewDragSensingEvent and DragSensingEvent.
            </summary>
            <param name="target">The target element to raise the routed event.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <returns>True if it is not canceled; otherwise, false.</returns>
        </member>
        <member name="F:Nicenis.Windows.DragSource.PreviewDraggingEvent">
            <summary>
            Identifies the PreviewDragging routed event that is raised when a dragging is about to start.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddPreviewDraggingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggingEventArgs})">
            <summary>
            Adds an event handler for the PreviewDragging event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemovePreviewDraggingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggingEventArgs})">
            <summary>
            Removes the event handler for the PreviewDragging event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DraggingEvent">
            <summary>
            Identifies the Dragging routed event that is raised when a dragging is about to start.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddDraggingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggingEventArgs})">
            <summary>
            Adds an event handler for the Dragging event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemoveDraggingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggingEventArgs})">
            <summary>
            Removes the event handler for the Dragging event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RaiseDraggingEvent(System.Windows.UIElement,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceDraggingEventArgsContext)">
            <summary>
            Raises the PreviewDraggingEvent and DraggingEvent.
            The context instance must be initialized.
            </summary>
            <param name="target">The target element to raise the routed event.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context.</param>
            <returns>True if it is not canceled; otherwise, false.</returns>
        </member>
        <member name="F:Nicenis.Windows.DragSource.PreviewGiveFeedbackEvent">
            <summary>
            Identifies the PreviewGiveFeedback routed event that is raised when the DragDrop.PreviewGiveFeedback event is raised.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddPreviewGiveFeedbackHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceGiveFeedbackEventArgs})">
            <summary>
            Adds an event handler for the PreviewGiveFeedback event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemovePreviewGiveFeedbackHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceGiveFeedbackEventArgs})">
            <summary>
            Removes the event handler for the PreviewGiveFeedback event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.GiveFeedbackEvent">
            <summary>
            Identifies the GiveFeedback routed event that is raised when the DragDrop.GiveFeedback event is raised.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddGiveFeedbackHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceGiveFeedbackEventArgs})">
            <summary>
            Adds an event handler for the GiveFeedback event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemoveGiveFeedbackHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceGiveFeedbackEventArgs})">
            <summary>
            Removes the event handler for the GiveFeedback event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RaiseGiveFeedbackEvent(System.Boolean,System.Windows.UIElement,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceGiveFeedbackEventArgsContext,System.Windows.GiveFeedbackEventArgs)">
            <summary>
            Raises the PreviewGiveFeedbackEvent or GiveFeedbackEvent.
            The context instance must be initialized.
            </summary>
            <param name="isPreview">Whether the event is the PreviewGiveFeedback.</param>
            <param name="target">The target element to raise the routed event.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context.</param>
            <param name="giveFeedbackEventArgs">The GiveFeedbackEventArgs.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.PreviewQueryContinueDragEvent">
            <summary>
            Identifies the PreviewQueryContinueDrag routed event that is raised the DragDrop.PreviewQueryContinueDrag event is raised.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddPreviewQueryContinueDragHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceQueryContinueDragEventArgs})">
            <summary>
            Adds an event handler for the PreviewQueryContinueDrag event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemovePreviewQueryContinueDragHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceQueryContinueDragEventArgs})">
            <summary>
            Removes the event handler for the PreviewQueryContinueDrag event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.QueryContinueDragEvent">
            <summary>
            Identifies the QueryContinueDrag routed event that is raised the DragDrop.QueryContinueDrag event is raised.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddQueryContinueDragHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceQueryContinueDragEventArgs})">
            <summary>
            Adds an event handler for the QueryContinueDrag event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemoveQueryContinueDragHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceQueryContinueDragEventArgs})">
            <summary>
            Removes the event handler for the QueryContinueDrag event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RaiseQueryContinueDragEvent(System.Boolean,System.Windows.UIElement,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceQueryContinueDragEventArgsContext,System.Windows.QueryContinueDragEventArgs)">
            <summary>
            Raises the PreviewQueryContinueDragEvent or QueryContinueDragEvent.
            The context instance must be initialized.
            </summary>
            <param name="isPreview">Whether the event is the PreviewQueryContinueDragEvent.</param>
            <param name="target">The target element to raise the routed event.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context.</param>
            <param name="queryContinueDragEventArgs">The QueryContinueDragEventArgs.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.PreviewDroppedEvent">
            <summary>
            Identifies the PreviewDropped routed event that is raised when a drag-and-drop operation is finished.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddPreviewDroppedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDroppedEventArgs})">
            <summary>
            Adds an event handler for the PreviewDropped event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemovePreviewDroppedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDroppedEventArgs})">
            <summary>
            Removes the event handler for the PreviewDropped event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DroppedEvent">
            <summary>
            Identifies the Dropped routed event that is raised when a drag-and-drop operation is finished.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddDroppedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDroppedEventArgs})">
            <summary>
            Adds an event handler for the Dropped event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemoveDroppedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDroppedEventArgs})">
            <summary>
            Removes the event handler for the Dropped event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.PreviewDraggedEvent">
            <summary>
            Identifies the PreviewDragged routed event that is raised when a drag-and-drop operation is finished.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddPreviewDraggedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggedEventArgs})">
            <summary>
            Adds an event handler for the PreviewDragged event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemovePreviewDraggedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggedEventArgs})">
            <summary>
            Removes the event handler for the PreviewDragged event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragSource.DraggedEvent">
            <summary>
            Identifies the Dragged routed event that is raised when a drag-and-drop operation is finished.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.AddDraggedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggedEventArgs})">
            <summary>
            Adds an event handler for the Dragged event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RemoveDraggedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragSourceDraggedEventArgs})">
            <summary>
            Removes the event handler for the Dragged event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.RaiseDraggedEvent(System.Windows.UIElement,Nicenis.Windows.DragInitiator,System.Windows.Point,System.Windows.Point,Nicenis.Windows.IDragSourceDraggedEventArgsContext,System.Windows.DragDropEffects)">
            <summary>
            Raises the PreviewDraggedEvent and DraggedEvent.
            The context instance must be initialized.
            </summary>
            <param name="target">The target element to raise the routed event.</param>
            <param name="initiator">The drag initiator.</param>
            <param name="contactPosition">The contact position in the dragged source.</param>
            <param name="draggedPosition">The dragged position in the dragged source.</param>
            <param name="context">The context.</param>
            <param name="finalEffects">The value that is returned by the DragDrop.DoDragDrop method.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.IsEnoughToStartDrag(System.Windows.Vector,System.Windows.Point,System.Windows.Point)">
            <summary>
            Checks whether the movement distance is enough to start a drag.
            </summary>
            <param name="minDragDistance">The size of a rectangle centered on a drag position to allow for limited movement of the pointer before a drag operation begins.</param>
            <param name="startPosition">The start location.</param>
            <param name="draggedPosition">The dragged location.</param>
            <returns>True if it is enough to start a drag; otherwise, false.</returns>
        </member>
        <member name="T:Nicenis.Windows.DragSource.Context">
            <summary>
            The storage to save context related information.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragSource.Context._target">
            <summary>
            The target element to drag.
            This variable is set to non-null value in the Constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.Context.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the Context class.
            </summary>
            <param name="target">The target element to drag. Null is not allowed.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.Context.InitializeForEventsAfterDragSensing(System.Windows.DragDropEffects,System.Object,System.Boolean,System.Object,System.Windows.DataTemplate,System.Windows.Controls.DataTemplateSelector,System.Object,System.Windows.Point,System.Double,System.Windows.Visibility,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes this context for events after the DragSensing event.
            </summary>
            <param name="allowedEffects">A value indicating permitted effects of the drag-and-drop operation.</param>
            <param name="data">A data object that contains the data being dragged.</param>
            <param name="isAutoVisualFeedbackAllowed">A value that indicates whether the auto generated visual feedback is allowed or not.</param>
            <param name="visualFeedback">An object that is set to the content of the visual drag feedback.</param>
            <param name="visualFeedbackTemplate">A data template used to display the content of the visual drag feedback.</param>
            <param name="visualFeedbackTemplateSelector">A template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.</param>
            <param name="visualFeedbackDataContext">An object that is set to the data context of the visual drag feedback.</param>
            <param name="visualFeedbackOffset">An offset that is pointed by a pointing device in the visual drag feedback.</param>
            <param name="visualFeedbackOpacity">An opacity of the visual drag feedback.</param>
            <param name="visualFeedbackVisibility">A value for the visual drag feedback visibility.</param>
            <param name="visualFeedbackWidth">A width of the visual drag feedback.</param>
            <param name="visualFeedbackHeight">A height of the visual drag feedback.</param>
            <param name="visualFeedbackMinWidth">A minimum width of the visual drag feedback.</param>
            <param name="visualFeedbackMinHeight">A minimum height of the visual drag feedback.</param>
            <param name="visualFeedbackMaxWidth">A maximum width of the visual drag feedback.</param>
            <param name="visualFeedbackMaxHeight">A maximum height of the visual drag feedback.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.Context.UpdateVisualFeedbackHost">
            <summary>
            Updates the VisualFeedbackHost.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.Context.CleanUp">
            <summary>
            Cleans up internal states to help the garbage collection.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.ProcessMoveForDragSensingTimer">
            <summary>
            The timer to check cursor movement for sensing drag when it is not in the target element.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.AllowedEffects">
            <summary>
            Gets or sets a value indicating permitted effects of the drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.Data">
            <summary>
            Gets or sets a data object that contains the data being dragged.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.IsAutoVisualFeedbackAllowed">
            <summary>
            Gets or sets a value that indicates whether the auto generated visual feedback is allowed or not.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedback">
            <summary>
            Gets or sets an object that is set to the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackTemplate">
            <summary>
            Gets or sets a data template used to display the content of the visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackTemplateSelector">
            <summary>
            Gets or sets a template selector that enables an application writer to provide custom template-selection logic for visual drag feedback.
            If this value is not null, the auto generated visual drag feedback is not displayed.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackDataContext">
            <summary>
            Gets or sets an object that is set to the data context of the visual drag feedback.
            If this value is null, the drag source's data context is set.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackOffset">
            <summary>
            Gets or sets an offset that is pointed by a pointing device in the visual drag feedback.
            The origin is the upper-left corner of the visual drag feedback.
            The x-coordinates increase to the right. The y-coordinates increase to the bottom.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackOpacity">
            <summary>
            Gets or sets an opacity of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackVisibility">
            <summary>
            Gets or sets the visual drag feedback visibility.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackWidth">
            <summary>
            Gets or sets a width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackHeight">
            <summary>
            Gets or sets a height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackMinWidth">
            <summary>
            Gets or sets a minimum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackMinHeight">
            <summary>
            Gets or sets a minimum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackMaxWidth">
            <summary>
            Gets or sets a maximum width of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackMaxHeight">
            <summary>
            Gets or sets a maximum height of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.Context.VisualFeedbackHost">
            <summary>
            The host of the visual drag feedback.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSource.VisualFeedbackHost">
            <summary>
            Represents host for the visual drag feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the VisualFeedbackHost class.
            </summary>
            <param name="dragSource">The element to drag.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.CreateHostWindow">
            <summary>
            Creates a host window for the visual drag feedback.
            </summary>
            <returns>A new host window.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.GetTransformFromDevice(System.Windows.Window)">
            <summary>
            Returns the TransformFromDevice matrix of the specified window.
            </summary>
            <param name="window">The window.</param>
            <returns>The transformFromDevice matrix.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.DisposeVisualFeedbackContentManager">
            <summary>
            Disposes the VisualFeedbackContentManager and set it to null.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.DisposeHostWindow">
            <summary>
            Disposes the host window and set it to null.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.UpdateHostWindowLocation(System.Windows.Point)">
            <summary>
            Updates the host window location to follow the position of the dragging.
            </summary>
            <param name="offset">The offset that is pointed by a pointing device in the the host window. The origin is the upper-left corner of the host window. The x-coordinates increase to the right. The y-coordinates increase to the bottom.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackHost.Update(System.Boolean,System.Object,System.Windows.DataTemplate,System.Windows.Controls.DataTemplateSelector,System.Object,System.Windows.Point,System.Double,System.Windows.Visibility,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the visual feedback host to display the visual drag feedback appropriately.
            If content or contentTemplate or contentTemplateSelector is not null,
            auto generated visual feedback is not displayed regardless of the isAutoVisualFeedbackAllowed.
            </summary>
            <param name="isAutoVisualFeedbackAllowed">A value that indicates whether the auto generated visual feedback is allowed or not.</param>
            <param name="content">The content of the visual feedback host.</param>
            <param name="contentTemplate">The content template of the visual feedback host.</param>
            <param name="contentTemplateSelector">The content template selector of the visual feedback host.</param>
            <param name="dataContext">The data context of the visual feedback host. If this value is null, the drag source's data context is used.</param>
            <param name="offset">An offset that is pointed by a pointing device in the visual feedback host. The origin is the upper-left corner of the visual feedback host. The x-coordinates increase to the right. The y-coordinates increase to the bottom.</param>
            <param name="opacity">An opacity of the visual feedback host.</param>
            <param name="visibility">The visual feedback host visibility.</param>
            <param name="width">A width of the visual feedback host.</param>
            <param name="height">A height of the visual feedback host.</param>
            <param name="minWidth">A minimum width of the visual feedback host.</param>
            <param name="minHeight">A minimum height of the visual feedback host.</param>
            <param name="maxWidth">A maximum width of the visual feedback host.</param>
            <param name="maxHeight">A maximum height of the visual feedback host.</param>
        </member>
        <member name="P:Nicenis.Windows.DragSource.VisualFeedbackHost.VisualFeedbackContentManager">
            <summary>
            The content manager of the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.VisualFeedbackHost.HostWindow">
            <summary>
            The window to host the visual drag feedback.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.VisualFeedbackHost.DragSourceDataContext">
            <summary>
            The data context set to the drag source element.
            It can be null.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragSource.VisualFeedbackContentManager">
            <summary>
            Manages content for the visual feedback.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackContentManager.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the VisualFeedbackContentManager class.
            </summary>
            <param name="dragSource">The element to drag.</param>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackContentManager.CreateGeneratedContent(System.Windows.UIElement)">
            <summary>
            Generates a visual feedback based on the dragged element.
            </summary>
            <param name="dragSource">The element to drag.</param>
            <returns>A generated visual feedback if the dragSource is not null; otherwise null.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackContentManager.DisposeContentControl">
            <summary>
            Disposes the content control and set it to null.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragSource.VisualFeedbackContentManager.CreateOrGetContent(System.Boolean,System.Object,System.Windows.DataTemplate,System.Windows.Controls.DataTemplateSelector)">
            <summary>
            Creates or gets the FrameworkElement that can be used as a content of the visual feedback.
            If content or contentTemplate or contentTemplateSelector is not null,
            auto generated visual feedback is not returned regardless of the isAutoVisualFeedbackAllowed.
            It can return null if the visual feedback is not allowed or no content.
            </summary>
            <param name="isAutoVisualFeedbackAllowed">A value that indicates whether the auto generated visual feedback is allowed or not.</param>
            <param name="content">The content of the visual feedback.</param>
            <param name="contentTemplate">The content template of the visual feedback.</param>
            <param name="contentTemplateSelector">The content template selector of the visual feedback.</param>
            <returns>The visual feedback content.</returns>
        </member>
        <member name="P:Nicenis.Windows.DragSource.VisualFeedbackContentManager.ContentControl">
            <summary>
            The content control to host the visual feedback content.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragSource.VisualFeedbackContentManager.GeneratedContent">
            <summary>
            The generated visual feedback content.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DropTarget">
            <summary>
            Provides functionalities related to drop target.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.ContextProperty">
            <summary>
            The attached property to store internal context information.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets a value that stores internal context information.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
            <returns>A Context instance.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetContext(System.Windows.DependencyObject,Nicenis.Windows.DropTarget.Context)">
            <summary>
            Sets a value that stores internal context information.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
            <param name="value">A Context instance.</param>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetSafeContext(System.Windows.UIElement)">
            <summary>
            Gets a value that stores internal context information.
            If it is not set, new context is created and set.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.AllowDropProperty">
            <summary>
            The attached property to indicate whether this element can be used as the target of a drag-and-drop operation.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetAllowDrop(System.Windows.UIElement)">
            <summary>
            Gets a value that indicates whether this element can be used as the target of a drag-and-drop operation.
            It is possible that this value is not synchronized with the UIElement.AllowDrop or the IsActivated property.
            </summary>
            <param name="obj">The target element.</param>
            <returns>True if it can be used as the target of a drag-and-drop operation; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetAllowDrop(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.
            UIElement.AllowDrop and IsActivated are updated according to this value.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether this element can be used as the target of a drag-and-drop operation.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.IsActivatedProperty">
            <summary>
            The attached property to indicate whether the drop target related functionality is activated.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetIsActivated(System.Windows.UIElement)">
            <summary>
            Gets a value that indicates whether the drop target related functionality is activated.
            </summary>
            <param name="obj">The target element.</param>
            <returns>True if it is activated; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetIsActivated(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether the drop target related functionality is activated.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether the drop target related functionality is activated.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.IsDragOverPropertyKey">
            <summary>
            The readonly attached property key for a value that indicates whether a dragged item is in the drop target.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.IsDragOverProperty">
            <summary>
            The readonly attached property for a value that indicates whether a dragged item is in the drop target.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetIsDragOver(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates whether a dragged item is in the drop target.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that indicates whether a dragged item is in the drop target.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetIsDragOver(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value that indicates whether a dragged item is in the drop target.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether a dragged item is in the drop target.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.IsDragHoverPropertyKey">
            <summary>
            The readonly attached property key for a value that indicates whether the dragged item is hovering in the drop target.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.IsDragHoverProperty">
            <summary>
            The readonly attached property for a value that indicates whether the dragged item is hovering in the drop target.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetIsDragHover(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates whether the dragged item is hovering in the drop target.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that indicates whether the dragged item is hovering in the drop target.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetIsDragHover(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value that indicates whether the dragged item is hovering in the drop target.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether the dragged item is hovering in the drop target.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.DragHoverEventModeProperty">
            <summary>
            The attached property to describe how drag hover event is raised.
            </summary>
            <seealso cref="T:Nicenis.Windows.HoverEventMode"/>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetDragHoverEventMode(System.Windows.DependencyObject)">
            <summary>
            Gets a value that describes how drag hover event is raised.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that describes how drag hover event is raised.</returns>
            <seealso cref="T:Nicenis.Windows.HoverEventMode"/>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetDragHoverEventMode(System.Windows.DependencyObject,Nicenis.Windows.HoverEventMode)">
            <summary>
            Sets a value that describes how drag hover event is raised.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that describes how drag hover event is raised.</param>
            <seealso cref="T:Nicenis.Windows.HoverEventMode"/>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.DragHoverTimeProperty">
            <summary>
            The attached property for the time, in milliseconds, that the dragged item must remain in the hover rectangle to generate a drag hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetDragHoverTime(System.Windows.DependencyObject)">
            <summary>
            Gets the time, in milliseconds, that the dragged item must remain in the hover rectangle to generate a drag hover event.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The time, in milliseconds, that the dragged item must remain in the hover rectangle to generate a drag hover event.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetDragHoverTime(System.Windows.DependencyObject,System.TimeSpan)">
            <summary>
            Sets the time, in milliseconds, that the dragged item must remain in the hover rectangle to generate a drag hover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The time, in milliseconds, that the dragged item must remain in the hover rectangle to generate a drag hover event.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.DragHoverWidthProperty">
            <summary>
            The attached property for the width, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetDragHoverWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the width, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The width, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetDragHoverWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the width, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The width, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.DragHoverHeightProperty">
            <summary>
            The attached property for the height, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.GetDragHoverHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the height, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The height, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.</returns>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.SetDragHoverHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the height, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The height, in pixels, of the rectangle within which the dragged item has to stay to generate a drag hover event.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.PreviewDragHoverEvent">
            <summary>
            Identifies the PreviewDragHover routed event that is raised when dragged item is hover.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.AddPreviewDragHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragHoverEventArgs})">
            <summary>
            Adds an event handler for the PreviewDragHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.RemovePreviewDragHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragHoverEventArgs})">
            <summary>
            Removes the event handler for the PreviewDragHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.DragHoverEvent">
            <summary>
            Identifies the DragHover routed event that is raised when dragged item is hover.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.AddDragHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragHoverEventArgs})">
            <summary>
            Adds an event handler for the DragHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.RemoveDragHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragHoverEventArgs})">
            <summary>
            Removes the event handler for the DragHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="T:Nicenis.Windows.DropTarget.Context">
            <summary>
            The storage to save context related information.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DropTarget.Context._target">
            <summary>
            The target element to raise the hover event.
            This variable is set to non-null value in the Constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DropTarget.Context.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the Context class.
            </summary>
            <param name="target">The target element to raise the hover event. Null is not allowed.</param>
        </member>
        <member name="P:Nicenis.Windows.DropTarget.Context.DragHoverImplementation">
            <summary>
            The DragHoverImplementation.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DropTarget.Context.LeaveDelayInvoker">
            <summary>
            Delays the DragHoverImplementation.ProcessLeave call to ignore if any child element is involved.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.FrameworkElementHelper">
            <summary>
            Provides functionalities related to FrameworkElement.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.CalculateHorizontalResize(System.Double,System.Double,System.Double,System.Double,Nicenis.Windows.BorderResizeMode,System.Double,System.Boolean@,System.Double@,System.Double@)">
            <summary>
            Calculate horizontal resize.
            </summary>
            <param name="left">Resized target's left.</param>
            <param name="width">Resized target's width.</param>
            <param name="minWidth">Resized target's minimum width.</param>
            <param name="maxWidth">Resized target's maximum width.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="isNewLeft">True if the newLeftOrRight is left; otherwise false.</param>
            <param name="newLeftOrRight">New left or right resulted by resize. If it is right, it is equal to the sum of the left and width.</param>
            <param name="newWidth">New width resulted by resize.</param>
            <returns>True if the width is changed.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.CalculateVerticalResize(System.Double,System.Double,System.Double,System.Double,Nicenis.Windows.BorderResizeMode,System.Double,System.Boolean@,System.Double@,System.Double@)">
            <summary>
            Calculate vertical resize.
            </summary>
            <param name="top">Resized target's top.</param>
            <param name="height">Resized target's height.</param>
            <param name="minHeight">Resized target's minimum height.</param>
            <param name="maxHeight">Resized target's maximum height.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <param name="isNewTop">True if the newTopOrBottom is top; otherwise false.</param>
            <param name="newTopOrBottom">New top or bottom resulted by resize. If it is bottom, it is equal to the sum of the top and height.</param>
            <param name="newHeight">New height resulted by resize.</param>
            <returns>True if the height is changed.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.ResizeWindow(System.Windows.Window,Nicenis.Windows.BorderResizeMode,System.Double,System.Double)">
            <summary>
            Resize window.
            </summary>
            <param name="window">Target window.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <returns>True if the window is resized.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.ResizeFrameworkElement(System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Double,System.Double)">
            <summary>
            Resize FrameworkElement that is laid on Canvas.
            </summary>
            <param name="element">Target FrameworkElement.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <returns>True if the FrameworkElement is resized.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.Resize(System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Double,System.Double)">
            <summary>
            Resize FrameworkElement that is laid on Canvas.
            </summary>
            <param name="element">Target FrameworkElement.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <returns>True if the FrameworkElement is resized.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.Resize(System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Windows.Vector)">
            <summary>
            Resize FrameworkElement that is laid on Canvas.
            </summary>
            <param name="element">Target FrameworkElement.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="delta">Changed distance.</param>
            <returns>True if the FrameworkElement is resized.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.Resize(System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Resize FrameworkElement that is laid on Canvas.
            </summary>
            <param name="element">Target FrameworkElement.</param>
            <param name="resizeMode">Resize mode.</param>
            <param name="e">Thumb's DragDelta event argument.</param>
            <returns>True if the FrameworkElement is resized.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.CalculateHorizontalMove(System.Double,System.Double,System.Double@)">
            <summary>
            Calculate horizontal move.
            </summary>
            <param name="left">Moved target's left.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="newLeft">New left resulted by move.</param>
            <returns>True if the left is changed.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.CalculateVerticalMove(System.Double,System.Double,System.Double@)">
            <summary>
            Calculate vertical move.
            </summary>
            <param name="top">Moved target's top.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <param name="newTop">New top resulted by move.</param>
            <returns>True if the top is changed.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.MoveWindow(System.Windows.Window,System.Double,System.Double)">
            <summary>
            Move window.
            </summary>
            <param name="window">Target window.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <returns>True if the window is moved.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.MoveFrameworkElement(System.Windows.FrameworkElement,System.Double,System.Double)">
            <summary>
            Move FrameworkElement that is laid on Canvas.
            </summary>
            <param name="element">Target FrameworkElement.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <returns>True if the FrameworkElement is moved.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.Move(System.Windows.FrameworkElement,System.Double,System.Double)">
            <summary>
            Move FrameworkElement that is laid on Canvas.
            </summary>
            <param name="element">Target FrameworkElement.</param>
            <param name="deltaX">Distance that is changed horizontally.</param>
            <param name="deltaY">Distance that is changed vertically.</param>
            <returns>True if the FrameworkElement is moved.</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.Move(System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Move FrameworkElement that is laid on Canvas
            </summary>
            <param name="element">Target FrameworkElement</param>
            <param name="delta">Changed distance</param>
            <returns>True if the FrameworkElement is moved</returns>
        </member>
        <member name="M:Nicenis.Windows.FrameworkElementHelper.Move(System.Windows.FrameworkElement,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Move FrameworkElement that is laid on Canvas
            </summary>
            <param name="element">Target FrameworkElement</param>
            <param name="e">Thumb's DragDelta event argument</param>
            <returns>True if the FrameworkElement is moved</returns>
        </member>
        <member name="T:Nicenis.Windows.HoverBehavior">
            <summary>
            Provides functionalities related to hover.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.ContextProperty">
            <summary>
            The attached property to store internal context information.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets a value that stores internal context information.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
            <returns>A Context instance.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetContext(System.Windows.DependencyObject,Nicenis.Windows.HoverBehavior.Context)">
            <summary>
            Sets a value that stores internal context information.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
            <param name="value">A Context instance.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetSafeContext(System.Windows.UIElement)">
            <summary>
            Gets a value that stores internal context information.
            If it is not set, new context is created and set.
            </summary>
            <param name="obj">A DependencyObject instance.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.IsActivatedProperty">
            <summary>
            The attached property to indicate whether the hover behavior is activated.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetIsActivated(System.Windows.UIElement)">
            <summary>
            Gets a value that indicates whether the hover behavior is activated.
            </summary>
            <param name="obj">The target element.</param>
            <returns>True if it is activated; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetIsActivated(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether the hover behavior is activated.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether the drop target related functionality is activated.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.IsMouseHoverPropertyKey">
            <summary>
            The readonly attached property key for a value that indicates whether the mouse is hovering in the target element.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.IsMouseHoverProperty">
            <summary>
            The readonly attached property for a value that indicates whether the mouse is hovering in the target element.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetIsMouseHover(System.Windows.DependencyObject)">
            <summary>
            Gets a value that indicates whether the mouse is hovering in the target element.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that indicates whether the mouse is hovering in the target element.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetIsMouseHover(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value that indicates whether the mouse is hovering in the target element.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that indicates whether the mouse is hovering in the target element.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.HoverEventModeProperty">
            <summary>
            The attached property to describe how hover event is raised.
            </summary>
            <seealso cref="T:Nicenis.Windows.HoverEventMode"/>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetHoverEventMode(System.Windows.DependencyObject)">
            <summary>
            Gets a value that describes how hover event is raised.
            </summary>
            <param name="obj">The target element.</param>
            <returns>A value that describes how hover event is raised.</returns>
            <seealso cref="T:Nicenis.Windows.HoverEventMode"/>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetHoverEventMode(System.Windows.DependencyObject,Nicenis.Windows.HoverEventMode)">
            <summary>
            Sets a value that describes how hover event is raised.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">A value that describes how hover event is raised.</param>
            <seealso cref="T:Nicenis.Windows.HoverEventMode"/>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.HoverTimeProperty">
            <summary>
            The attached property for the time, in milliseconds, that the pointing device must remain in the hover rectangle to generate a hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetHoverTime(System.Windows.DependencyObject)">
            <summary>
            Gets the time, in milliseconds, that the pointing device must remain in the hover rectangle to generate a hover event.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The time, in milliseconds, that the pointing device must remain in the hover rectangle to generate a hover event.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetHoverTime(System.Windows.DependencyObject,System.TimeSpan)">
            <summary>
            Sets the time, in milliseconds, that the pointing device must remain in the hover rectangle to generate a hover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The time, in milliseconds, that the pointing device must remain in the hover rectangle to generate a hover event.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.HoverWidthProperty">
            <summary>
            The attached property for the width, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetHoverWidth(System.Windows.DependencyObject)">
            <summary>
            Gets the width, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The width, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetHoverWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the width, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The width, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.HoverHeightProperty">
            <summary>
            The attached property for the height, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.GetHoverHeight(System.Windows.DependencyObject)">
            <summary>
            Gets the height, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.
            </summary>
            <param name="obj">The target element.</param>
            <returns>The height, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.SetHoverHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the height, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="value">The height, in pixels, of the rectangle within which the pointing device has to stay to generate a hover event.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.PreviewMouseHoverEvent">
            <summary>
            Identifies the PreviewMouseHover routed event that is raised when the mouse is hover.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.AddPreviewMouseHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.MouseHoverEventArgs})">
            <summary>
            Adds an event handler for the PreviewMouseHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.RemovePreviewMouseHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.MouseHoverEventArgs})">
            <summary>
            Removes the event handler for the PreviewMouseHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.MouseHoverEvent">
            <summary>
            Identifies the MouseHover routed event that is raised when the mouse is hover.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.AddMouseHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.MouseHoverEventArgs})">
            <summary>
            Adds an event handler for the MouseHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.RemoveMouseHoverHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.MouseHoverEventArgs})">
            <summary>
            Removes the event handler for the MouseHover event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="T:Nicenis.Windows.HoverBehavior.Context">
            <summary>
            The storage to save context related information.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverBehavior.Context._target">
            <summary>
            The target element to raise the hover event.
            This variable is set to non-null value in the Constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehavior.Context.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the Context class.
            </summary>
            <param name="target">The target element to raise the hover event. Null is not allowed.</param>
        </member>
        <member name="P:Nicenis.Windows.HoverBehavior.Context.HoverBehaviorImplementation">
            <summary>
            The HoverBehaviorImplementation.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.HoverEventArgs">
            <summary>
            Contains arguments for the Hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.Point,System.Int64,System.Windows.Point,System.Int64)">
            <summary>
            Initializes a new instance of the HoverEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="basePosition">The base position for recognizing hover action.</param>
            <param name="baseTicks">The ticks when the BasePosition is set.</param>
            <param name="hoveredPosition">The position at which the hover event is occurred.</param>
            <param name="hoveredTicks">The ticks when the hover event is occurred.</param>
        </member>
        <member name="P:Nicenis.Windows.HoverEventArgs.BasePosition">
            <summary>
            The base position for recognizing hover action.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.HoverEventArgs.BaseTicks">
            <summary>
            The ticks when the BasePosition is set.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.HoverEventArgs.HoveredPosition">
            <summary>
            The position at which the hover event is occurred.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.HoverEventArgs.HoveredTicks">
            <summary>
            The ticks when the hover event is occurred.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.MouseHoverEventArgs">
            <summary>
            Contains arguments for the MouseHover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.MouseHoverEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.Point,System.Int64,System.Windows.Point,System.Int64)">
            <summary>
            Initializes a new instance of the MouseHoverEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="basePosition">The base position for recognizing hover action.</param>
            <param name="baseTicks">The ticks when the BasePosition is set.</param>
            <param name="hoveredPosition">The position at which the hover event is occurred.</param>
            <param name="hoveredTicks">The ticks when the hover event is occurred.</param>
        </member>
        <member name="T:Nicenis.Windows.DragHoverEventArgs">
            <summary>
            Contains arguments for the DragHover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragHoverEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.Point,System.Int64,System.Windows.Point,System.Int64)">
            <summary>
            Initializes a new instance of the DragHoverEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="basePosition">The base position for recognizing hover action.</param>
            <param name="baseTicks">The ticks when the BasePosition is set.</param>
            <param name="hoveredPosition">The position at which the hover event is occurred.</param>
            <param name="hoveredTicks">The ticks when the hover event is occurred.</param>
        </member>
        <member name="T:Nicenis.Windows.HoverEventMode">
            <summary>
            Describe how the hover event is raised.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverEventMode.Once">
            <summary>
            The hover event is raised when the hover condition is met
            and it is not raised again if pointing device is still in the target element.
            To raise the hover event again, the pointing device must be left out
            and reenter the target element and the hover condition is met.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverEventMode.Normal">
            <summary>
            The hover event is raised when the hover condition is met.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverEventMode.Repeat">
            <summary>
            The hover event is raised when the hover condition is met
            and it is repeated until the hover condition is broken.
            The interval is HoverTime.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.HoverImplementationBase">
            <summary>
            Provides base implementation to raise the Hover event.
            This class is used to share hover related codes with others such as the DropTarget class.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverImplementationBase._target">
            <summary>
            The target UI element to raise the hover event.
            This variable is set to non-null value in the Constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the HoverImplementationBase class.
            </summary>
            <param name="target">The target element for the hover event.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.IsHover(System.Windows.Vector,System.Windows.Point,System.Windows.Point)">
            <summary>
            Checks whether the move is hover or not.
            </summary>
            <param name="allowedMoveDistance">The size of a rectangle centered on the base position. The current position is recognized as hover if it is in this rectangle.</param>
            <param name="basePosition">The base position that is the center of the rectangle of the allowedMoveDistance.</param>
            <param name="currentPosition">The position to check.</param>
            <returns>True if it is hover, otherwise false.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.PointFromScreen(System.Windows.Point)">
            <summary>
            Converts a Point in screen coordinates into a Point that represents the current coordinate system of the target UI element.
            </summary>
            <param name="point">The Point value in screen coordinates.</param>
            <returns>The converted Point value that represents the current coordinate system of the target UI element.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.PointToScreen(System.Windows.Point)">
            <summary>
            Converts a Point that represents the current coordinate system of the target UI element into a Point in screen coordinates.
            </summary>
            <param name="point">The Point value that represents the current coordinate system of the target UI element.</param>
            <returns>The converted Point value in screen coordinates.</returns>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.CallHoverCallback(System.Action{System.Windows.Point,System.Int64,System.Windows.Point,System.Int64},System.Windows.Point,System.Int64)">
            <summary>
            Calls the hover callback action.
            </summary>
            <param name="hoverCallback">A callback action that is called when Hover is detected.</param>
            <param name="hoveredPositionInScreen">The hovered position in screen coordinates.</param>
            <param name="hoveredTicks">The hovered ticks.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.ProcessEnter(System.Action{System.Boolean})">
            <summary>
            Handles that a pointing device enters the target UI element.
            This method must be called even if the enter event handler is already handled.
            </summary>
            <param name="setIsHover">An action that sets a IsHover.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverImplementationBase.ProcessLeave(System.Action{System.Boolean})">
            <summary>
            Handles that a pointing device leaves the target UI element.
            This method must be called even if the leave event handler is already handled.
            </summary>
            <param name="setIsHover">An action that sets a IsHover.</param>
        </member>
        <member name="P:Nicenis.Windows.HoverImplementationBase.BasePositionInScreen">
            <summary>
            The base position for recognizing hover action in screen coordinates.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.HoverImplementationBase.BaseTicks">
            <summary>
            The ticks when the BasePositionInScreen is set.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.HoverImplementationBase.IsRaisedAfterEnter">
            <summary>
            Whether the Hover event is raised within the target UI element.
            This value is set to false if the pointing device is reenter.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.HoverBehaviorImplementation">
            <summary>
            Provides actual implementation to raise the Hover event.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.HoverBehaviorImplementation._hoverDelayInvoker">
            <summary>
            The DelayInvoker that raises the Hover event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.HoverBehaviorImplementation.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the HoverBehaviorImplementation class.
            </summary>
            <param name="target">The target element for the hover event.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverBehaviorImplementation.ProcessEnter(System.Action{System.Boolean})">
            <summary>
            Handles that a pointing device enters the target UI element.
            This method must be called even if the enter event handler is already handled.
            </summary>
            <param name="setIsHover">An action that sets a IsHover.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverBehaviorImplementation.ProcessMove(System.Windows.Point,System.Double,System.Double,System.Func{System.Windows.Point},System.Func{Nicenis.Windows.HoverEventMode},System.Func{System.TimeSpan},System.Action{System.Boolean},System.Action{System.Windows.Point,System.Int64,System.Windows.Point,System.Int64})">
            <summary>
            Handles that a pointing device moves in the target UI element.
            </summary>
            <param name="currentPosition">The current pointing device position relative to the target UI element.</param>
            <param name="hoverWidth">A HoverWidth.</param>
            <param name="hoverHeight">A HoverHeight.</param>
            <param name="getPosition">A function that returns the current pointing device position relative to the target UI element. This function is called before the Hover event is raised.</param>
            <param name="getHoverEventMode">A function that returns a HoverEventMode.</param>
            <param name="getHoverTime">A function that returns a HoverTime.</param>
            <param name="setIsHover">An action that sets a IsHover.</param>
            <param name="hoverCallback">A callback action that is called when Hover is detected.</param>
        </member>
        <member name="M:Nicenis.Windows.HoverBehaviorImplementation.ProcessLeave(System.Action{System.Boolean})">
            <summary>
            Handles that a pointing device leaves the target UI element.
            This method must be called even if the leave event handler is already handled.
            </summary>
            <param name="setIsHover">An action that sets a IsHover.</param>
        </member>
        <member name="T:Nicenis.Windows.DragHoverImplementation">
            <summary>
            Provides actual implementation to raise the DragHover event.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragHoverImplementation._isRaisedAtBasePosition">
            <summary>
            Whether the Hover event is raised at the BasePosition.
            This value is set to false if the pointing device leaves the hover rectangle(HoverWidth, HoverHeight).
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragHoverImplementation.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the DragHoverImplementation class.
            </summary>
            <param name="target">The target element for the hover event.</param>
        </member>
        <member name="M:Nicenis.Windows.DragHoverImplementation.IsHover(System.Int64,System.Int64,System.Int64)">
            <summary>
            Checks whether the elapsed time is enough to be recognized as hover.
            </summary>
            <param name="minElapsedTicks">The minimum elapsed ticks to be recognized as hover.</param>
            <param name="baseTicks">The base (start) ticks.</param>
            <param name="currentTicks">The current ticks.</param>
            <returns>True if it is hover, otherwise false.</returns>
        </member>
        <member name="M:Nicenis.Windows.DragHoverImplementation.ProcessEnter(System.Action{System.Boolean})">
            <summary>
            Handles that the dragged pointing device enters the target UI element.
            This method must be called even if the enter event handler is already handled.
            </summary>
            <param name="setIsHover">An action that sets a IsHover.</param>
        </member>
        <member name="M:Nicenis.Windows.DragHoverImplementation.ProcessOver(System.Windows.Point,Nicenis.Windows.HoverEventMode,System.TimeSpan,System.Double,System.Double,System.Action{System.Boolean},System.Action{System.Windows.Point,System.Int64,System.Windows.Point,System.Int64})">
            <summary>
            Handles that the dragged pointing device is over in the target UI element.
            For reference the DragOver event is raised periodically.
            </summary>
            <param name="currentPosition">The current pointing device position relative to the target UI element.</param>
            <param name="hoverEventMode">A HoverEventMode.</param>
            <param name="hoverTime">A HoverTime.</param>
            <param name="hoverWidth">A HoverWidth.</param> 
            <param name="hoverHeight">A HoverHeight.</param>
            <param name="setIsHover">An action that sets a IsHover.</param>
            <param name="hoverCallback">A callback action that is called when Hover is detected.</param>
        </member>
        <member name="T:Nicenis.Windows.Threading.DispatcherHelper">
            <summary>
            Provides utility methods for Dispatcher.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Threading.DispatcherHelper.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes the specified delegate asynchronously at the specified priority on the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to begin invoke</param>
            <param name="action">The Action to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="priority">The priority, relative to the other pending operations in the Dispatcher event queue, the specified method is invoked.</param>
            <returns>An object, which is returned immediately after BeginInvoke is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="M:Nicenis.Windows.Threading.DispatcherHelper.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Executes the specified delegate asynchronously on the thread that the Dispatcher was created on.
            </summary>
            <param name="dispatcher">The dispatcher to begin invoke</param>
            <param name="action">The Action to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <returns>An object, which is returned immediately after BeginInvoke is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="M:Nicenis.Windows.Threading.DispatcherHelper.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes the specified delegate synchronously at the specified priority on the thread on which the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke</param>
            <param name="action">The Action to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="priority">The priority, relative to the other pending operations in the Dispatcher event queue, the specified method is invoked.</param>
            <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
            <returns>An object, which is returned immediately after Invoke is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="M:Nicenis.Windows.Threading.DispatcherHelper.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Executes the specified delegate synchronously at the specified priority on the thread on which the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke</param>
            <param name="action">The Action to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="priority">The priority, relative to the other pending operations in the Dispatcher event queue, the specified method is invoked.</param>
            <returns>An object, which is returned immediately after Invoke is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="M:Nicenis.Windows.Threading.DispatcherHelper.Invoke(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan)">
            <summary>
            Executes the specified delegate synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke</param>
            <param name="action">The Action to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
            <returns>An object, which is returned immediately after Invoke is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="M:Nicenis.Windows.Threading.DispatcherHelper.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Executes the specified delegate synchronously on the thread the Dispatcher is associated with.
            </summary>
            <param name="dispatcher">The dispatcher to invoke</param>
            <param name="action">The Action to a method that takes parameters specified in args, which is pushed onto the Dispatcher event queue.</param>
            <returns>An object, which is returned immediately after Invoke is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
        </member>
        <member name="T:Nicenis.Threading.ISharedResourceUserInfo`1">
            <summary>
            Provides shared resource user information.
            </summary>
            <typeparam name="TResource">The resource type.</typeparam>
        </member>
        <member name="P:Nicenis.Threading.ISharedResourceUserInfo`1.Resource">
            <summary>
            The shared resource.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.ISharedResourceUserInfo`1.UserIndex">
            <summary>
            The index in tasks that use the resource concurrently.
            </summary>
        </member>
        <member name="T:Nicenis.Threading.SharedResourceUserInfo`1">
            <summary>
            Provides shared resource user information.
            </summary>
            <typeparam name="TResource">The resource type.</typeparam>
        </member>
        <member name="M:Nicenis.Threading.SharedResourceUserInfo`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="resource">The shared resource.</param>
            <param name="userIndex">The index in tasks that use the resource concurrently.</param>
        </member>
        <member name="P:Nicenis.Threading.SharedResourceUserInfo`1.Resource">
            <summary>
            The shared resource.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.SharedResourceUserInfo`1.UserIndex">
            <summary>
            The index in tasks that use the resource concurrently.
            </summary>
        </member>
        <member name="T:Nicenis.Threading.SharedResource`1">
            <summary>
            Manages accessing a shared resource.
            </summary>
            <remarks>
            This class is thread-safe.
            If TResource implements IDisposable, it is disposed when SharedResource&lt;TResource&gt; is disposed.
            </remarks>
            <typeparam name="TResource">The shared resource type.</typeparam>
        </member>
        <member name="F:Nicenis.Threading.SharedResource`1._resource">
            <summary>
            The resource.
            </summary>
        </member>
        <member name="F:Nicenis.Threading.SharedResource`1._isDisposed">
            <summary>
            Whether it is disposed.
            This field must be updated within a lock (_taskQueue) block.
            </summary>
        </member>
        <member name="F:Nicenis.Threading.SharedResource`1._taskQueue">
            <summary>
            The task queue.
            This field must be used within a lock (_taskQueue) block.
            </summary>
        </member>
        <member name="F:Nicenis.Threading.SharedResource`1._runningTasks">
            <summary>
            The running tasks.
            This field must be used within a lock (_taskQueue) block.
            </summary>
        </member>
        <member name="F:Nicenis.Threading.SharedResource`1._maxConcurrentUserCount">
            <summary>
            The max concurrent user count.
            This field must be updated within a lock (_taskQueue) block.
            </summary>
        </member>
        <member name="F:Nicenis.Threading.SharedResource`1._userCount">
            <summary>
            The current user count.
            This field must be updated within a lock (_taskQueue) block.
            </summary>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.#ctor(`0,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="resource">The shared resource.</param>
            <param name="maxConcurrentUserCount">The max concurrent user count.</param>
            <param name="isMaxConcurrentUserCountReadOnly">Whether the MaxConcurrentUserCount property is read only.</param>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.IsEndedTask(System.Threading.Tasks.Task)">
            <summary>
            Whether the task is ended.
            </summary>
            <param name="task">The task to check.</param>
            <returns>True if it is ended; otherwise false.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.InitializeRunningTasks">
            <summary>
            Initializes the running tasks array.
            This method must be called in a lock (_taskQueue) block.
            </summary>
            <returns>True if the running tasks array has empty slots or unknown; otherwise false if it has no empty slot.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.RemoveEndedTasks(System.Threading.Tasks.Task)">
            <summary>
            Removes ended tasks from the running tasks array.
            This method must be called in a lock (_taskQueue) block.
            </summary>
            <param name="endingTask">The task that is about to end.</param>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.StartQueuedTasks">
            <summary>
            Starts queued tasks if it is appropriate.
            This method must be called in a lock (_taskQueue) block.
            </summary>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.EnsureNotDisposed">
            <summary>
            Ensures that the shared resource is not disposed.
            </summary>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.CreateQueuedTask">
            <summary>
            Creates a queued task.
            </summary>
            <returns>An queued task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.EnqueueTask(Nicenis.Threading.SharedResource{`0}.QueuedTask)">
            <summary>
            Enqueues a task and tries to start it.
            </summary>
            <param name="queuedTask">The queued task to enqueue.</param>
            <returns>The task of the queued task passed by parameter.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.EndTask(Nicenis.Threading.SharedResource{`0}.QueuedTask)">
            <summary>
            Ends a task.
            </summary>
            <param name="endingQueuedTask">The queued task that is about to end.</param>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.CreateUserInfo(Nicenis.Threading.SharedResource{`0}.QueuedTask)">
            <summary>
            Creates a shared resource user info.
            </summary>
            <param name="queuedTask">The queued task.</param>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object},System.Object)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0}},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0}},System.Threading.CancellationToken)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync(System.Action{Nicenis.Threading.ISharedResourceUserInfo{`0}})">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <param name="action">The delegate that represents the code to execute with the resource.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},System.Object,``0},System.Object)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},``0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="creationOptions">The TaskCreationOptions used to customize the task’s behavior.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},``0},System.Threading.CancellationToken)">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <param name="cancellationToken">The CancellationToken that that the new task will observe.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.UseAsync``1(System.Func{Nicenis.Threading.ISharedResourceUserInfo{`0},``0})">
            <summary>
            Uses the resource asynchronously.
            </summary>
            <remarks>
            The returned task must not be started by user code.
            </remarks>
            <typeparam name="T">The return data type.</typeparam>
            <param name="func">The delegate that represents the code to execute with the resource.</param>
            <returns>The task instance.</returns>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.SharedResource`1.IsMaxConcurrentUserCountReadOnly">
            <summary>
            Whether the MaxConcurrentUserCount property is read only.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.SharedResource`1.MaxConcurrentUserCount">
            <summary>
            The number of max concurrent user that are allowed to use the resource concurrently.
            This propety must be greater than zero.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.SharedResource`1.UserCount">
            <summary>
            The number of user that uses the resource.
            </summary>
        </member>
        <member name="T:Nicenis.Threading.SharedResource`1.QueuedTask">
            <summary>
            Represents a task that is queued.
            </summary>
        </member>
        <member name="M:Nicenis.Threading.SharedResource`1.QueuedTask.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.SharedResource`1.QueuedTask.Task">
            <summary>
            The task that runs codes.
            </summary>
        </member>
        <member name="P:Nicenis.Threading.SharedResource`1.QueuedTask.UserIndex">
            <summary>
            The index in tasks that use the resource concurrently.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.WindowHelper">
            <summary>
            Provides functionalities for Window.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.WindowHelper.ShowSystemMenu(System.Windows.Window,System.Windows.Point)">
            <summary>
            Displays the system menu for the specified window.
            </summary>
            <param name="window">The window to have its system menu displayed.</param>
            <param name="locationInScreen">The location of the system menu in screen coordination.</param>
        </member>
        <member name="T:Nicenis.Windows.DependencyObjectHelper">
            <summary>
            Provides utility methods for DepencencyObject.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DependencyObjectHelper.VisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Returns a collection of elements that contains the visual ancestors of the DependencyObject.
            Each element is the visual parent of the previous element except the first element which is the visual parent of the target DependencyObject.
            </summary>
            <param name="dependencyObject">The target DependencyObject.</param>
            <returns>The collection of elements that contains the visual ancestors.</returns>
        </member>
        <member name="T:Nicenis.Windows.DragMoverEventArgsBase">
            <summary>
            Internal Use Only.
            The base class for DragMover related event argument classes.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMoverEventArgsBase.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the DragMoverEventArgsBase class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
        </member>
        <member name="P:Nicenis.Windows.DragMoverEventArgsBase.Target">
            <summary>
            Gets the target element that is related. It can be a Window.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragMoverMovingEventArgs">
            <summary>
            Contains arguments for the Moving event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMoverMovingEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Initializes a new instance of the DragMoverMovingEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="dragDelta">The dragged distance.</param>
        </member>
        <member name="P:Nicenis.Windows.DragMoverMovingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the move should be canceled.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMoverMovingEventArgs.DragDelta">
            <summary>
            Gets or sets the dragged distance.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragMoverMovedEventArgs">
            <summary>
            Contains arguments for the Moved event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMoverMovedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Initializes a new instance of the DragMoverMovedEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="dragDelta">The dragged distance.</param>
        </member>
        <member name="P:Nicenis.Windows.DragMoverMovedEventArgs.DragDelta">
            <summary>
            Gets the dragged distance.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragMover">
            <summary>
            Moves a Window or a FrameworkElement on a Canvas by dragging.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.#ctor">
            <summary>
            Initializes a new instance of the DragMover class.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call ApplyTemplate.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.TargetProperty">
            <summary>
            The dependency property for the target to move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MinLeftProperty">
            <summary>
            The dependency property for the minimum left that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MaxLeftProperty">
            <summary>
            The dependency property for the maximum left that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MinTopProperty">
            <summary>
            The dependency property for the minimum top that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MaxTopProperty">
            <summary>
            The dependency property for the maximum top that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MinRightProperty">
            <summary>
            The dependency property for the minimum right that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MaxRightProperty">
            <summary>
            The dependency property for the maximum right that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MinBottomProperty">
            <summary>
            The dependency property for the minimum bottom that the Target can move.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MaxBottomProperty">
            <summary>
            The dependency property for the maximum bottom that the Target can move.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.MinMaxPositionRelatedProperties_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The changed event handlers for the min-max position related properties.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.AdjustDeltaForMinMaxPositions(System.Windows.Vector@)">
            <summary>
            Adjusts the delta not to exceed the defined min-max positions.
            </summary>
            <param name="dragDelta">The drag delta to adjust.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.AdjustForMinMaxPositions">
            <summary>
            Adjusts not to exceed the defined min-max positions.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragMover.PreviewMovingEvent">
            <summary>
            Identifies the PreviewMoving routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.AddPreviewMovingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovingEventArgs})">
            <summary>
            Adds an event handler for the PreviewMoving event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.RemovePreviewMovingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovingEventArgs})">
            <summary>
            Removes the event handler for the PreviewMoving event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MovingEvent">
            <summary>
            Identifies the Moving routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.AddMovingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovingEventArgs})">
            <summary>
            Adds an event handler for the Moving event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.RemoveMovingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovingEventArgs})">
            <summary>
            Removes the event handler for the Moving event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.RaiseMovingEvent(System.Windows.UIElement,System.Windows.FrameworkElement,System.Windows.Vector@)">
            <summary>
            Raises PreviewMovingEvent and MovingEvent.
            </summary>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="dragDelta">The dragged distance.</param>
            <returns>True if it is not canceled; otherwise false.</returns>
        </member>
        <member name="F:Nicenis.Windows.DragMover.PreviewMovedEvent">
            <summary>
            Identifies the PreviewMoved routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.AddPreviewMovedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovedEventArgs})">
            <summary>
            Adds an event handler for the PreviewMoved event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.RemovePreviewMovedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovedEventArgs})">
            <summary>
            Removes the event handler for the PreviewMoved event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragMover.MovedEvent">
            <summary>
            Identifies the MovedEvent routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragMover.AddMovedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovedEventArgs})">
            <summary>
            Adds an event handler for the Moved event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.RemoveMovedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragMoverMovedEventArgs})">
            <summary>
            Removes the event handler for the Moved event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragMover.RaiseMovedEvent(System.Windows.UIElement,System.Windows.FrameworkElement,System.Windows.Vector)">
            <summary>
            Raises PreviewMovedEvent and MovedEvent.
            </summary>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="dragDelta">The dragged distance.</param>
        </member>
        <member name="P:Nicenis.Windows.DragMover.Target">
            <summary>
            Gets or sets the target to move.
            The target must be a Window or a FrameworkElement in a Canvas.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MinLeft">
            <summary>
            Gets or sets a value that indicates the minimum left that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MaxLeft">
            <summary>
            Gets or sets a value that indicates the maximum left that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MinTop">
            <summary>
            Gets or sets a value that indicates the minimum top that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MaxTop">
            <summary>
            Gets or sets a value that indicates the maximum top that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MinRight">
            <summary>
            Gets or sets a value that indicates the minimum right that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MaxRight">
            <summary>
            Gets or sets a value that indicates the maximum right that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MinBottom">
            <summary>
            Gets or sets a value that indicates the minimum bottom that the Target can move.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragMover.MaxBottom">
            <summary>
            Gets or sets a value that indicates the maximum bottom that the Target can move.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragMover.PreviewMoving">
            <summary>
            Occurs when the Target element is about to move.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragMover.Moving">
            <summary>
            Occurs when the Target element is about to move.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragMover.PreviewMoved">
            <summary>
            Occurs when the Target element is moved.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragMover.Moved">
            <summary>
            Occurs when the Target element is moved.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragResizerEventArgsBase">
            <summary>
            Internal Use Only.
            The base class for DragResizer related event argument classes.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizerEventArgsBase.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.FrameworkElement)">
            <summary>
            Initialize a new instance of the DragResizerEventArgsBase class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
        </member>
        <member name="P:Nicenis.Windows.DragResizerEventArgsBase.Target">
            <summary>
            Gets the target element that is related. It can be a Window.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragResizerResizingEventArgs">
            <summary>
            Contains arguments for the Resizing event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizerResizingEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Windows.Vector)">
            <summary>
            Initialize a new instance of the ResizingEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="mode">The resize mode.</param>
            <param name="dragDelta">The dragged distance.</param>
        </member>
        <member name="P:Nicenis.Windows.DragResizerResizingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the resize should be canceled.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragResizerResizingEventArgs.Mode">
            <summary>
            The resize mode.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragResizerResizingEventArgs.DragDelta">
            <summary>
            Gets or sets the dragged distance.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragResizerResizedEventArgs">
            <summary>
            Contains arguments for the Resized event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizerResizedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Windows.Vector)">
            <summary>
            Initialize a new instance of the ResizedEventArgs class.
            </summary>
            <param name="routedEvent">The routed event identifier for this instance of the RoutedEventArgs class.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="mode">The resize mode.</param>
            <param name="dragDelta">The dragged distance.</param>
        </member>
        <member name="P:Nicenis.Windows.DragResizerResizedEventArgs.Mode">
            <summary>
            The resize mode.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragResizerResizedEventArgs.DragDelta">
            <summary>
            Gets the dragged distance.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.DragResizer">
            <summary>
            Resizes a Window or a FrameworkElement on a Canvas by dragging.
            </summary>
            <remarks>
            The BorderThickness property is used for the size of internal thumbs.
            </remarks>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.#ctor">
            <summary>
            Initializes a new instance of the DragResizer class.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call ApplyTemplate.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragResizer.TargetProperty">
            <summary>
            The dependency property for the target to resize.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragResizer.ResizeModesProperty">
            <summary>
            The dependency property for the value that indicates allowed resize modes.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.Resize(Nicenis.Windows.BorderResizeMode,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Resizes the target.
            </summary>
            <param name="mode">The resize mode.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.AdjustThumbEnablement">
            <summary>
            Adjusts thumb enablements.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.DragResizer.PreviewResizingEvent">
            <summary>
            Identifies the PreviewResizing routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.AddPreviewResizingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizingEventArgs})">
            <summary>
            Adds an event handler for the PreviewResizing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.RemovePreviewResizingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizingEventArgs})">
            <summary>
            Removes the event handler for the PreviewResizing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragResizer.ResizingEvent">
            <summary>
            Identifies the Resizing routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.AddResizingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizingEventArgs})">
            <summary>
            Adds an event handler for the Resizing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.RemoveResizingHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizingEventArgs})">
            <summary>
            Removes the event handler for the Resizing event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.RaiseResizingEvent(System.Windows.UIElement,System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Windows.Vector@)">
            <summary>
            Raises PreviewResizingEvent and ResizingEvent.
            </summary>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="resizeMode">The resize mode.</param>
            <param name="dragDelta">The dragged distance.</param>
            <returns>True if it is not canceled; otherwise false.</returns>
        </member>
        <member name="F:Nicenis.Windows.DragResizer.PreviewResizedEvent">
            <summary>
            Identifies the PreviewResized routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.AddPreviewResizedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizedEventArgs})">
            <summary>
            Adds an event handler for the PreviewResized event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.RemovePreviewResizedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizedEventArgs})">
            <summary>
            Removes the event handler for the PreviewResized event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="F:Nicenis.Windows.DragResizer.ResizedEvent">
            <summary>
            Identifies the ResizedEvent routed event. 
            </summary>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.AddResizedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizedEventArgs})">
            <summary>
            Adds an event handler for the Resized event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.RemoveResizedHandler(System.Windows.UIElement,System.EventHandler{Nicenis.Windows.DragResizerResizedEventArgs})">
            <summary>
            Removes the event handler for the Resized event.
            </summary>
            <param name="obj">The target element.</param>
            <param name="handler">The event handler.</param>
        </member>
        <member name="M:Nicenis.Windows.DragResizer.RaiseResizedEvent(System.Windows.UIElement,System.Windows.FrameworkElement,Nicenis.Windows.BorderResizeMode,System.Windows.Vector)">
            <summary>
            Raises PreviewResizedEvent and ResizedEvent.
            </summary>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property.</param>
            <param name="target">The target element that is related. It can be a Window.</param>
            <param name="resizeMode">The resize mode.</param>
            <param name="dragDelta">The dragged distance.</param>
        </member>
        <member name="P:Nicenis.Windows.DragResizer.Target">
            <summary>
            Gets or sets the target to resize.
            The target must be a Window or a FrameworkElement in a Canvas.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.DragResizer.ResizeModes">
            <summary>
            Gets or sets a value that indicates allowed resize modes.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragResizer.PreviewResizing">
            <summary>
            Occurs when the Target element is about to resize.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragResizer.Resizing">
            <summary>
            Occurs when the Target element is about to resize.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragResizer.PreviewResized">
            <summary>
            Occurs when the Target element is moved.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.DragResizer.Resized">
            <summary>
            Occurs when the Target element is resized.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.BorderResizeMode">
            <summary>
            Represents border resize mode.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.Left">
            <summary>
            Resize by dragging the left edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.Top">
            <summary>
            Resize by dragging the top edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.Right">
            <summary>
            Resize by dragging the right edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.Bottom">
            <summary>
            Resize by dragging the bottom edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.TopLeft">
            <summary>
            Resize by dragging the top left corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.TopRight">
            <summary>
            Resize by dragging the top right corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.BottomLeft">
            <summary>
            Resize by dragging the bottom left corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeMode.BottomRight">
            <summary>
            Resize by dragging the bottom right corner.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.BorderResizeModes">
            <summary>
            Represents bitwise-ored border resize modes.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Left">
            <summary>
            Resize by dragging the left edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Top">
            <summary>
            Resize by dragging the top edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Right">
            <summary>
            Resize by dragging the right edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Bottom">
            <summary>
            Resize by dragging the bottom edge.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.TopLeft">
            <summary>
            Resize by dragging the top left corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.TopRight">
            <summary>
            Resize by dragging the top right corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.BottomLeft">
            <summary>
            Resize by dragging the bottom left corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.BottomRight">
            <summary>
            Resize by dragging the bottom right corner.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Horizontal">
            <summary>
            Left | Right
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Vertical">
            <summary>
            Top | Bottom
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Diagonal">
            <summary>
            BottomLeft | TopRight
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.ReverseDiagonal">
            <summary>
            TopLeft | BottomRight
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.Corners">
            <summary>
            TopLeft | TopRight | BottomLeft | BottomRight
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.All">
            <summary>
            All modes.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.BorderResizeModes.None">
            <summary>
            No mode.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.CustomWindowStateExChangedEventArgs">
            <summary>
            The event arguments for the StateExChanged event.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindowStateExChangedEventArgs.#ctor(Nicenis.Windows.WindowStateEx,Nicenis.Windows.WindowStateEx)">
            <summary>
            Initializes a new instance of the StateExChangedEventArgs class.
            </summary>
            <param name="oldValue">The WindowStateEx before the change.</param>
            <param name="newValue">The WindowStateEx after the change.</param>
        </member>
        <member name="P:Nicenis.Windows.CustomWindowStateExChangedEventArgs.OldValue">
            <summary>
            Gets the WindowStateEx before the change.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindowStateExChangedEventArgs.NewValue">
            <summary>
            Gets the WindowStateEx after the change.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.CustomWindow">
            <summary>
            A base class for non-standard window.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.#ctor">
            <summary>
            Initializes a new instance of the CustomWindow class.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.WindowStateExProperty">
            <summary>
            The dependency property for specifing the extended WindowState.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsMinimizedPropertyKey">
            <summary>
            The dependency property key for indicating whether the window is minimized.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsMinimizedProperty">
            <summary>
            The dependency property for indicating whether the window is minimized.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsNormalPropertyKey">
            <summary>
            The dependency property key for indicating whether the window is normal.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsNormalProperty">
            <summary>
            The dependency property for indicating whether the window is normal.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsMaximizedPropertyKey">
            <summary>
            The dependency property key for indicating whether the window is maximized.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsMaximizedProperty">
            <summary>
            The dependency property for indicating whether the window is maximized.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsFullScreenPropertyKey">
            <summary>
            The dependency property key for indicating whether the window is full screen.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsFullScreenProperty">
            <summary>
            The dependency property for indicating whether the window is full screen.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsFullScreenModePropertyKey">
            <summary>
            The dependency property key for indicating whether the window is in full screen mode.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsFullScreenModeProperty">
            <summary>
            The dependency property for indicating whether the window is in full screen mode.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.InitializeCommands">
            <summary>
            Initializes the related commands.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.MinimizeCommandPropertyKey">
            <summary>
            The dependency property key for the command that minimizes the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.MinimizeCommandProperty">
            <summary>
            The dependency property for the command that minimizes the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.RestoreCommandPropertyKey">
            <summary>
            The dependency property key for the command that restores the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.RestoreCommandProperty">
            <summary>
            The dependency property for the command that restores the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.MaximizeCommandPropertyKey">
            <summary>
            The dependency property key for the command that maximizes the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.MaximizeCommandProperty">
            <summary>
            The dependency property for the command that maximizes the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.FullScreenCommandPropertyKey">
            <summary>
            The dependency property key for the command that makes the window full screen.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.FullScreenCommandProperty">
            <summary>
            The dependency property for the command that makes the window full screen.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.CloseCommandPropertyKey">
            <summary>
            The dependency property key for the command that closes the window.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.CloseCommandProperty">
            <summary>
            The dependency property for the command that closes the window.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the SourceInitialized event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.OnInitialized(System.EventArgs)">
            <summary>
            Raises the Initialized event. This method is invoked whenever IsInitialized is set to true internally. 
            </summary>
            <param name="e">The RoutedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow._appliedWindowStateEx">
            <summary>
            The WindowStateEx that is in effect.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.Apply(Nicenis.Windows.WindowStateEx)">
            <summary>
            Applies the specified windowStateEx to the window.
            </summary>
            <param name="windowStateEx">The WindowStateEx to apply.</param>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.OnStateExChanged(Nicenis.Windows.CustomWindowStateExChangedEventArgs)">
            <summary>
            Raises the StateExChanged event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsIconProperty">
            <summary>
            The attached property to set an element as a window icon.
            The window icon element shows the system menu when mouse left button is down or mouse right button is up.
            If mouse is double clicked on the window icon element, the window is closed.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.GetIsIcon(System.Windows.FrameworkElement)">
            <summary>
            Gets a value that indicates whether the element is set as a window icon.
            </summary>
            <param name="target">The target element.</param>
            <returns>True if it is set as a window icon; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.SetIsIcon(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether the element is set as a window icon.
            </summary>
            <param name="target">The target element.</param>
            <param name="isIcon">A value that indicates whether the element is set as a window icon.</param>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsTitleBarProperty">
            <summary>
            The attached property to set an element as a window title bar.
            The WindowIcon element shows the system menu when mouse left button is down or mouse right button is up.
            If mouse is double clicked on the WindowIcon element, the window is closed.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.GetIsTitleBar(System.Windows.FrameworkElement)">
            <summary>
            Gets a value that indicates whether the element is set as a window title bar.
            </summary>
            <param name="target">The target element.</param>
            <returns>True if it is set as a window title bar; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.SetIsTitleBar(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether the element is set as a window title bar.
            </summary>
            <param name="target">The target element.</param>
            <param name="isTitleBar">A value that indicates whether the element is set as a window title bar.</param>
        </member>
        <member name="F:Nicenis.Windows.CustomWindow.IsSystemContextMenuActivatedProperty">
            <summary>
            The attached property that makes an element to show the system menu when mouse right button is up.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.GetIsSystemContextMenuActivated(System.Windows.UIElement)">
            <summary>
            Gets a value that indicates whether it shows the system menu when mouse right button is up.
            </summary>
            <param name="target">The target element.</param>
            <returns>True if it shows system menu when mouse right button is up; otherwise, false.</returns>
        </member>
        <member name="M:Nicenis.Windows.CustomWindow.SetIsSystemContextMenuActivated(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value that indicates whether it shows the system menu when mouse right button is up.
            </summary>
            <param name="target">The target element.</param>
            <param name="isSystemContextMenuActivated">A value that indicates whether it shows the system menu when mouse right button is up.</param>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.WindowStateEx">
            <summary>
            Gets or sets a value that specifies the extended WindowState.
            It supports full screen.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.IsMinimized">
            <summary>
            Gets a value that indicates whether the window is minimized.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.IsNormal">
            <summary>
            Gets a value that indicates whether the window is normal.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.IsMaximized">
            <summary>
            Gets a value that indicates whether the window is maximized.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.IsFullScreen">
            <summary>
            Gets a value that indicates whether the window is full screen.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.IsFullScreenMode">
            <summary>
            Gets a value that indicates whether the window is in full screen mode.
            </summary>
            <remarks>
            This value indicates whether the window is full screen or not when it's WindowStateEx is not Maximized or FullScreen.
            This property is required to restore the full screen window from the minimized state.
            </remarks>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.MinimizeCommand">
            <summary>
            Gets a command that minimizes the window.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.RestoreCommand">
            <summary>
            Gets a command that restores the window.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.MaximizeCommand">
            <summary>
            Gets a command that maximizes the window.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.FullScreenCommand">
            <summary>
            Gets a command that makes the window full screen.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.CustomWindow.CloseCommand">
            <summary>
            Gets a command that closes the window.
            </summary>
        </member>
        <member name="E:Nicenis.Windows.CustomWindow.StateExChanged">
            <summary>
            Occurs when the window's WindowStateEx property changes.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.Input.DelegateCommand">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.#ctor(System.Action)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.CanExecute">
            <summary>
                Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.Execute">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
                Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand.OnCanExecuteChanged">
            <summary>
                Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="P:Nicenis.Windows.Input.DelegateCommand.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="E:Nicenis.Windows.Input.DelegateCommand.CanExecuteChanged">
            <summary>
                ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:Nicenis.Windows.Input.DelegateCommand`1">
            <summary>
                This class allows delegating the commanding logic to methods passed as parameters,
                and enables a View to bind commands to objects that are not part of the element tree.
            </summary>
            <typeparam name="T">Type of the parameter passed to the delegates</typeparam>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.CanExecute(`0)">
            <summary>
                Method to determine if the command can be executed
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.Execute(`0)">
            <summary>
                Execution of the command
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.RaiseCanExecuteChanged">
            <summary>
                Raises the CanExecuteChaged event
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Input.DelegateCommand`1.OnCanExecuteChanged">
            <summary>
                Protected virtual method to raise CanExecuteChanged event
            </summary>
        </member>
        <member name="P:Nicenis.Windows.Input.DelegateCommand`1.IsAutomaticRequeryDisabled">
            <summary>
                Property to enable or disable CommandManager's automatic requery on this command
            </summary>
        </member>
        <member name="E:Nicenis.Windows.Input.DelegateCommand`1.CanExecuteChanged">
            <summary>
                ICommand.CanExecuteChanged implementation
            </summary>
        </member>
        <member name="T:Nicenis.Windows.Input.CommandManagerHelper">
            <summary>
                This class contains methods for the CommandManager that help avoid memory leaks by
                using weak references.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.Shell.ShellFileInfo">
            <summary>
            Provides file information related to the Windows Shell.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Shell.ShellFileInfo.ToImageSource(System.IntPtr)">
            <summary>
            Returns a frozen ImageSource from the icon handle.
            </summary>
            <param name="hIcon">The icon handle to convert.</param>
            <returns>A frozen ImageSource.</returns>
        </member>
        <member name="M:Nicenis.Windows.Shell.ShellFileInfo.GetIcon(System.String,Nicenis.Windows.Shell.ShellIconSize,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a fronzen ImageSource that is the shell icon of the specified path.
            </summary>
            <param name="path">The file/folder relative/abolute path. Nonexistent path is allowed. Null is not allowed.</param>
            <param name="shellIconSize">The icon size.</param>
            <param name="includeOverlay">Whether the overlay is displayed or not. It is ignored except these icon sizes: ShellIconSize.ShellSized, ShellIconSize.Small, ShellIconSize.Large.</param>
            <param name="includeLinkOverlay">Whether the link overlay is displayed or not. It is ignored except these icon sizes: ShellIconSize.ShellSized, ShellIconSize.Small, ShellIconSize.Large.</param>
            <param name="isOpen">Whether the open icon is returned or not.</param>
            <param name="isSelected">Whether the selected icon is returned or not.</param>
            <returns>A frozen ImageSource that is the shell icon.</returns>
        </member>
        <member name="M:Nicenis.Windows.Shell.ShellFileInfo.GetDisplayName(System.String)">
            <summary>
            Returns the shell display name of the specified path.
            If the path is nonexistent or it is failed, the file name returned by the Path.GetFileName method is returned.
            </summary>
            <param name="path">The path to evaluate. Null is not allowed.</param>
            <returns>The shell display name if it succeeds; otherwise, the file name returned by the Path.GetFileName method.</returns>
        </member>
        <member name="T:Nicenis.Windows.Shell.ShellIconSize">
            <summary>
            Denotes icon size in the Windows Shell.
            </summary>
            <remarks>
            Icon size descriptions are copied from the SHGetFileInfo function page in the MSDN.
            </remarks>
        </member>
        <member name="F:Nicenis.Windows.Shell.ShellIconSize.ShellSized">
            <summary>
            Shell-sized icon
            </summary>
        </member>
        <member name="F:Nicenis.Windows.Shell.ShellIconSize.SystemSmall">
            <summary>
            These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.Shell.ShellIconSize.Small">
            <summary>
            These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.Shell.ShellIconSize.Large">
            <summary>
            The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the Appearance tab in Display Properties, the image is 48x48 pixels.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.Shell.ShellIconSize.ExtraLarge">
            <summary>
            These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.Shell.ShellIconSize.Jumbo">
            <summary>
            Windows Vista and later. The image is normally 256x256 pixels.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.Threading.DelayInvoker">
            <summary>
            Executes an action with delay on the Dispatcher's thread.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <param name="dispatcher">The Dispatcher to execute the action.</param>
            <param name="action">The action to execute with delay. Null is allowed.</param>
            <param name="delayTime">Time to wait before executing the action.</param>
            <param name="dispatcherPriority">The priority at which execute the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Windows.Threading.Dispatcher,System.Action,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            The priority is set to DispatcherPriority.Normal.
            </remarks>
            <param name="dispatcher">The Dispatcher to execute the action.</param>
            <param name="action">The action to execute with delay. Null is allowed.</param>
            <param name="delayTime">Time to wait before executing the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            This constructor uses default values: the DispatcherPriority.Normal priority,
            1 second delay time.
            </remarks>
            <param name="dispatcher">The Dispatcher to execute the action.</param>
            <param name="action">The action to execute with delay. Null is allowed.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            This constructor uses default values: the DispatcherPriority.Normal priority,
            1 second delay time, a null action.
            </remarks>
            <param name="dispatcher">The Dispatcher to execute the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Action,System.TimeSpan,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            This constructor uses the dispatcher returned by the Dispatcher.CurrentDispatcher.
            </remarks>
            <param name="action">The action to execute with delay. Null is allowed.</param>
            <param name="delayTime">Time to wait before executing the action.</param>
            <param name="dispatcherPriority">The priority at which execute the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Action,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            This constructor uses default values: the Dispatcher.CurrentDispatcher dispatcher,
            the DispatcherPriority.Normal priority.
            </remarks>
            <param name="action">The action to execute with delay. Null is allowed.</param>
            <param name="delayTime">Time to wait before executing the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            This constructor uses default values: the Dispatcher.CurrentDispatcher dispatcher,
            the DispatcherPriority.Normal priority, 1 second delay time.
            </remarks>
            <param name="action">The action to execute with delay. Null is allowed.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.#ctor">
            <summary>
            Initializes a new instance of the DelayInvoker class.
            </summary>
            <remarks>
            This constructor uses default values: the Dispatcher.CurrentDispatcher dispatcher,
            the DispatcherPriority.Normal priority, 1 second delay time, a null action.
            </remarks>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Start(System.Action,System.TimeSpan)">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
            <param name="action">The action to execute with delay.</param>
            <param name="delayTime">Time to wait before executing the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Begin(System.Action,System.TimeSpan)">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
            <param name="action">The action to execute with delay.</param>
            <param name="delayTime">Time to wait before executing the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Start(System.Action)">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
            <param name="action">The action to execute with delay.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Begin(System.Action)">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
            <param name="action">The action to execute with delay.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Start(System.TimeSpan)">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
            <param name="delayTime">Time to wait before executing the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Begin(System.TimeSpan)">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
            <param name="delayTime">Time to wait before executing the action.</param>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Start">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.StartIfNotStarted">
            <summary>
            Starts a new delay execution if it is not started.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Begin">
            <summary>
            Starts a new delay execution.
            Previous waiting is canceled.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.Threading.DelayInvoker.Cancel">
            <summary>
            Cancels the waiting.
            The action is not executed after this method is called.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.Threading.DelayInvoker.IsEnabled">
            <summary>
            Gets or sets a value that indicates whether the DelayInvoker is waiting or not.
            </summary>
        </member>
        <member name="P:Nicenis.Windows.Threading.DelayInvoker.Action">
            <summary>
            The action to execute with delay.
            This value can be null.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.WindowStateEx">
            <summary>
            The extended WindowState which contains the full screen mode.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.WindowStateEx.Normal">
            <summary>
            Window is normal or restored.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.WindowStateEx.Minimized">
            <summary>
            Window is minimized.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.WindowStateEx.Maximized">
            <summary>
            Window is maximized.
            </summary>
        </member>
        <member name="F:Nicenis.Windows.WindowStateEx.FullScreen">
            <summary>
            Window is in full screen mode.
            </summary>
        </member>
        <member name="T:Nicenis.Windows.WindowStateExHelper">
            <summary>
            Provides WindowStateEx related utility methods.
            </summary>
        </member>
        <member name="M:Nicenis.Windows.WindowStateExHelper.ToWindowStateEx(System.Windows.WindowState,System.Boolean)">
            <summary>
            Converts a WindowState enumeration to a WindowStateEx enumeration.
            </summary>
            <param name="windowState">A WindowState.</param>
            <param name="isFullScreenMode">Whether it is in full screen mode.</param>
            <returns>The converted  WindowStateEx.</returns>
        </member>
        <member name="M:Nicenis.Windows.WindowStateExHelper.ToWindowState(Nicenis.Windows.WindowStateEx)">
            <summary>
            Converts a WindowStateEx enumeration to a WindowState enumeration.
            </summary>
            <param name="windowStateEx">A WindowStateEx.</param>
            <returns>The converted  WindowState.</returns>
        </member>
    </members>
</doc>
